import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js'
import { z } from 'zod'
import axios, { AxiosInstance } from 'axios'
import dotenv from 'dotenv'
import { CallToolResult } from '@modelcontextprotocol/sdk/types.js'

dotenv.config()

export const envSchema = z.object({
  GITHUB_API_KEY: z.string(),
})

export const mcpServer = new McpServer(
  {
    name: '@sargonpiraev/github-mcp-server',
    version: '1.1.4',
  },
  {
    instructions: ``,
    capabilities: {
      tools: {},
      logging: {},
    },
  }
)

export const env = envSchema.parse(process.env)

export const apiClient: AxiosInstance = axios.create({
  baseURL: 'https://api.github.com',
  headers: {
    Accept: 'application/json',
  },
  timeout: 30000,
})

apiClient.interceptors.request.use(
  (config) => {
    if (env.GITHUB_API_KEY) {
      config.headers['Authorization'] = env.GITHUB_API_KEY
    }

    return config
  },
  (error) => {
    return Promise.reject(error)
  }
)

function handleResult(data: unknown): CallToolResult {
  return {
    content: [
      {
        type: 'text',
        text: JSON.stringify(data, null, 2),
      },
    ],
  }
}

function handleError(error: unknown): CallToolResult {
  console.error(error)

  if (axios.isAxiosError(error)) {
    const message = error.response?.data?.message || error.message
    return {
      isError: true,
      content: [{ type: 'text', text: `API Error: ${message}` }],
    } as CallToolResult
  }

  return {
    isError: true,
    content: [{ type: 'text', text: `Error: ${error}` }],
  } as CallToolResult
}

// Register tools
mcpServer.tool('meta/root', `GitHub API Root`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'security-advisories/list-global-advisories',
  `List global security advisories`,
  {
    ghsaId: z.string().optional(),
    type: z.string().optional(),
    cveId: z.string().optional(),
    ecosystem: z.string().optional(),
    severity: z.string().optional(),
    cwes: z.string().optional(),
    isWithdrawn: z.string().optional(),
    affects: z.string().optional(),
    published: z.string().optional(),
    updated: z.string().optional(),
    modified: z.string().optional(),
    epssPercentage: z.string().optional(),
    epssPercentile: z.string().optional(),
    perPage: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('ghsaId' in mappedParams) {
        mappedParams['ghsa_id'] = mappedParams['ghsaId']
        delete mappedParams['ghsaId']
      }
      if ('cveId' in mappedParams) {
        mappedParams['cve_id'] = mappedParams['cveId']
        delete mappedParams['cveId']
      }
      if ('isWithdrawn' in mappedParams) {
        mappedParams['is_withdrawn'] = mappedParams['isWithdrawn']
        delete mappedParams['isWithdrawn']
      }
      if ('epssPercentage' in mappedParams) {
        mappedParams['epss_percentage'] = mappedParams['epssPercentage']
        delete mappedParams['epssPercentage']
      }
      if ('epssPercentile' in mappedParams) {
        mappedParams['epss_percentile'] = mappedParams['epssPercentile']
        delete mappedParams['epssPercentile']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/advisories',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'security-advisories/get-global-advisory',
  `Get a global security advisory`,
  {
    ghsaId: z.string(),
  },
  async (args, extra) => {
    try {
      const { ghsaId, ...queryParams } = args
      const url = `/advisories/${ghsaId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('ghsaId' in mappedParams) {
        mappedParams['ghsa_id'] = mappedParams['ghsaId']
        delete mappedParams['ghsaId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('apps/get-authenticated', `Get the authenticated app`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/app',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'apps/create-from-manifest',
  `Create a GitHub App from a manifest`,
  {
    code: z.string(),
  },
  async (args, extra) => {
    try {
      const { code, ...requestData } = args
      const url = `/app-manifests/${code}/conversions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('apps/get-webhook-config-for-app', `Get a webhook configuration for an app`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/app/hook/config',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'apps/update-webhook-config-for-app',
  `Update a webhook configuration for an app`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: '/app/hook/config',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('apps/list-webhook-deliveries', `List deliveries for an app webhook`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/app/hook/deliveries',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'apps/get-webhook-delivery',
  `Get a delivery for an app webhook`,
  {
    deliveryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { deliveryId, ...queryParams } = args
      const url = `/app/hook/deliveries/${deliveryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('deliveryId' in mappedParams) {
        mappedParams['delivery_id'] = mappedParams['deliveryId']
        delete mappedParams['deliveryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/redeliver-webhook-delivery',
  `Redeliver a delivery for an app webhook`,
  {
    deliveryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { deliveryId, ...requestData } = args
      const url = `/app/hook/deliveries/${deliveryId}/attempts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('deliveryId' in mappedParams) {
        mappedParams['delivery_id'] = mappedParams['deliveryId']
        delete mappedParams['deliveryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/list-installation-requests-for-authenticated-app',
  `List installation requests for the authenticated app`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/app/installation-requests',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/list-installations',
  `List installations for the authenticated app`,
  {
    outdated: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/app/installations',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/get-installation',
  `Get an installation for the authenticated app`,
  {
    installationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { installationId, ...queryParams } = args
      const url = `/app/installations/${installationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('installationId' in mappedParams) {
        mappedParams['installation_id'] = mappedParams['installationId']
        delete mappedParams['installationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/delete-installation',
  `Delete an installation for the authenticated app`,
  {
    installationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { installationId, ...queryParams } = args
      const url = `/app/installations/${installationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('installationId' in mappedParams) {
        mappedParams['installation_id'] = mappedParams['installationId']
        delete mappedParams['installationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/create-installation-access-token',
  `Create an installation access token for an app`,
  {
    installationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { installationId, ...requestData } = args
      const url = `/app/installations/${installationId}/access_tokens`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('installationId' in mappedParams) {
        mappedParams['installation_id'] = mappedParams['installationId']
        delete mappedParams['installationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/suspend-installation',
  `Suspend an app installation`,
  {
    installationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { installationId, ...requestData } = args
      const url = `/app/installations/${installationId}/suspended`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('installationId' in mappedParams) {
        mappedParams['installation_id'] = mappedParams['installationId']
        delete mappedParams['installationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/unsuspend-installation',
  `Unsuspend an app installation`,
  {
    installationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { installationId, ...queryParams } = args
      const url = `/app/installations/${installationId}/suspended`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('installationId' in mappedParams) {
        mappedParams['installation_id'] = mappedParams['installationId']
        delete mappedParams['installationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/delete-authorization',
  `Delete an app authorization`,
  {
    clientId: z.string(),
  },
  async (args, extra) => {
    try {
      const { clientId, ...queryParams } = args
      const url = `/applications/${clientId}/grant`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clientId' in mappedParams) {
        mappedParams['client_id'] = mappedParams['clientId']
        delete mappedParams['clientId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/check-token',
  `Check a token`,
  {
    clientId: z.string(),
  },
  async (args, extra) => {
    try {
      const { clientId, ...requestData } = args
      const url = `/applications/${clientId}/token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('clientId' in mappedParams) {
        mappedParams['client_id'] = mappedParams['clientId']
        delete mappedParams['clientId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/reset-token',
  `Reset a token`,
  {
    clientId: z.string(),
  },
  async (args, extra) => {
    try {
      const { clientId, ...requestData } = args
      const url = `/applications/${clientId}/token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('clientId' in mappedParams) {
        mappedParams['client_id'] = mappedParams['clientId']
        delete mappedParams['clientId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/delete-token',
  `Delete an app token`,
  {
    clientId: z.string(),
  },
  async (args, extra) => {
    try {
      const { clientId, ...queryParams } = args
      const url = `/applications/${clientId}/token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clientId' in mappedParams) {
        mappedParams['client_id'] = mappedParams['clientId']
        delete mappedParams['clientId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/scope-token',
  `Create a scoped access token`,
  {
    clientId: z.string(),
  },
  async (args, extra) => {
    try {
      const { clientId, ...requestData } = args
      const url = `/applications/${clientId}/token/scoped`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('clientId' in mappedParams) {
        mappedParams['client_id'] = mappedParams['clientId']
        delete mappedParams['clientId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/get-by-slug',
  `Get an app`,
  {
    appSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { appSlug, ...queryParams } = args
      const url = `/apps/${appSlug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('appSlug' in mappedParams) {
        mappedParams['app_slug'] = mappedParams['appSlug']
        delete mappedParams['appSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'classroom/get-an-assignment',
  `Get an assignment`,
  {
    assignmentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { assignmentId, ...queryParams } = args
      const url = `/assignments/${assignmentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('assignmentId' in mappedParams) {
        mappedParams['assignment_id'] = mappedParams['assignmentId']
        delete mappedParams['assignmentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'classroom/list-accepted-assignments-for-an-assignment',
  `List accepted assignments for an assignment`,
  {
    assignmentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { assignmentId, ...queryParams } = args
      const url = `/assignments/${assignmentId}/accepted_assignments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('assignmentId' in mappedParams) {
        mappedParams['assignment_id'] = mappedParams['assignmentId']
        delete mappedParams['assignmentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'classroom/get-assignment-grades',
  `Get assignment grades`,
  {
    assignmentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { assignmentId, ...queryParams } = args
      const url = `/assignments/${assignmentId}/grades`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('assignmentId' in mappedParams) {
        mappedParams['assignment_id'] = mappedParams['assignmentId']
        delete mappedParams['assignmentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('classroom/list-classrooms', `List classrooms`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/classrooms',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'classroom/get-a-classroom',
  `Get a classroom`,
  {
    classroomId: z.string(),
  },
  async (args, extra) => {
    try {
      const { classroomId, ...queryParams } = args
      const url = `/classrooms/${classroomId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('classroomId' in mappedParams) {
        mappedParams['classroom_id'] = mappedParams['classroomId']
        delete mappedParams['classroomId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'classroom/list-assignments-for-a-classroom',
  `List assignments for a classroom`,
  {
    classroomId: z.string(),
  },
  async (args, extra) => {
    try {
      const { classroomId, ...queryParams } = args
      const url = `/classrooms/${classroomId}/assignments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('classroomId' in mappedParams) {
        mappedParams['classroom_id'] = mappedParams['classroomId']
        delete mappedParams['classroomId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('codes-of-conduct/get-all-codes-of-conduct', `Get all codes of conduct`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/codes_of_conduct',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'codes-of-conduct/get-conduct-code',
  `Get a code of conduct`,
  {
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { key, ...queryParams } = args
      const url = `/codes_of_conduct/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('credentials/revoke', `Revoke a list of credentials`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/credentials/revoke',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('emojis/get', `Get emojis`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/emojis',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'code-security/get-configurations-for-enterprise',
  `Get code security configurations for an enterprise`,
  {
    enterprise: z.string(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { enterprise, ...queryParams } = args
      const url = `/enterprises/${enterprise}/code-security/configurations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/create-configuration-for-enterprise',
  `Create a code security configuration for an enterprise`,
  {
    enterprise: z.string(),
  },
  async (args, extra) => {
    try {
      const { enterprise, ...requestData } = args
      const url = `/enterprises/${enterprise}/code-security/configurations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/get-default-configurations-for-enterprise',
  `Get default code security configurations for an enterprise`,
  {
    enterprise: z.string(),
  },
  async (args, extra) => {
    try {
      const { enterprise, ...queryParams } = args
      const url = `/enterprises/${enterprise}/code-security/configurations/defaults`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/get-single-configuration-for-enterprise',
  `Retrieve a code security configuration of an enterprise`,
  {
    enterprise: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { enterprise, configurationId, ...queryParams } = args
      const url = `/enterprises/${enterprise}/code-security/configurations/${configurationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/update-enterprise-configuration',
  `Update a custom code security configuration for an enterprise`,
  {
    enterprise: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { enterprise, configurationId, ...requestData } = args
      const url = `/enterprises/${enterprise}/code-security/configurations/${configurationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/delete-configuration-for-enterprise',
  `Delete a code security configuration for an enterprise`,
  {
    enterprise: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { enterprise, configurationId, ...queryParams } = args
      const url = `/enterprises/${enterprise}/code-security/configurations/${configurationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/attach-enterprise-configuration',
  `Attach an enterprise configuration to repositories`,
  {
    enterprise: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { enterprise, configurationId, ...requestData } = args
      const url = `/enterprises/${enterprise}/code-security/configurations/${configurationId}/attach`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/set-configuration-as-default-for-enterprise',
  `Set a code security configuration as a default for an enterprise`,
  {
    enterprise: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { enterprise, configurationId, ...requestData } = args
      const url = `/enterprises/${enterprise}/code-security/configurations/${configurationId}/defaults`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/get-repositories-for-enterprise-configuration',
  `Get repositories associated with an enterprise code security configuration`,
  {
    enterprise: z.string(),
    configurationId: z.string(),
    perPage: z.string().optional(),
    status: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { enterprise, configurationId, ...queryParams } = args
      const url = `/enterprises/${enterprise}/code-security/configurations/${configurationId}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/list-alerts-for-enterprise',
  `List Dependabot alerts for an enterprise`,
  {
    enterprise: z.string(),
  },
  async (args, extra) => {
    try {
      const { enterprise, ...queryParams } = args
      const url = `/enterprises/${enterprise}/dependabot/alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'secret-scanning/list-alerts-for-enterprise',
  `List secret scanning alerts for an enterprise`,
  {
    enterprise: z.string(),
  },
  async (args, extra) => {
    try {
      const { enterprise, ...queryParams } = args
      const url = `/enterprises/${enterprise}/secret-scanning/alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('activity/list-public-events', `List public events`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/events',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('activity/get-feeds', `Get feeds`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/feeds',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('gists/list', `List gists for the authenticated user`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/gists',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('gists/create', `Create a gist`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/gists',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('gists/list-public', `List public gists`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/gists/public',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('gists/list-starred', `List starred gists`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/gists/starred',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'gists/get',
  `Get a gist`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...queryParams } = args
      const url = `/gists/${gistId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/update',
  `Update a gist`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...requestData } = args
      const url = `/gists/${gistId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/delete',
  `Delete a gist`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...queryParams } = args
      const url = `/gists/${gistId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/list-comments',
  `List gist comments`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...queryParams } = args
      const url = `/gists/${gistId}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/create-comment',
  `Create a gist comment`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...requestData } = args
      const url = `/gists/${gistId}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/get-comment',
  `Get a gist comment`,
  {
    gistId: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, commentId, ...queryParams } = args
      const url = `/gists/${gistId}/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/update-comment',
  `Update a gist comment`,
  {
    gistId: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, commentId, ...requestData } = args
      const url = `/gists/${gistId}/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/delete-comment',
  `Delete a gist comment`,
  {
    gistId: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, commentId, ...queryParams } = args
      const url = `/gists/${gistId}/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/list-commits',
  `List gist commits`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...queryParams } = args
      const url = `/gists/${gistId}/commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/list-forks',
  `List gist forks`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...queryParams } = args
      const url = `/gists/${gistId}/forks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/fork',
  `Fork a gist`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...requestData } = args
      const url = `/gists/${gistId}/forks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/check-is-starred',
  `Check if a gist is starred`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...queryParams } = args
      const url = `/gists/${gistId}/star`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/star',
  `Star a gist`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...requestData } = args
      const url = `/gists/${gistId}/star`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/unstar',
  `Unstar a gist`,
  {
    gistId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, ...queryParams } = args
      const url = `/gists/${gistId}/star`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/get-revision',
  `Get a gist revision`,
  {
    gistId: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { gistId, sha, ...queryParams } = args
      const url = `/gists/${gistId}/${sha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gistId' in mappedParams) {
        mappedParams['gist_id'] = mappedParams['gistId']
        delete mappedParams['gistId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('gitignore/get-all-templates', `Get all gitignore templates`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/gitignore/templates',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'gitignore/get-template',
  `Get a gitignore template`,
  {
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { name, ...queryParams } = args
      const url = `/gitignore/templates/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/list-repos-accessible-to-installation',
  `List repositories accessible to the app installation`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/installation/repositories',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/revoke-installation-access-token',
  `Revoke an installation access token`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: '/installation/token',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list',
  `List issues assigned to the authenticated user`,
  {
    filter: z.string().optional(),
    state: z.string().optional(),
    sort: z.string().optional(),
    collab: z.string().optional(),
    orgs: z.string().optional(),
    owned: z.string().optional(),
    pulls: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/issues',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'licenses/get-all-commonly-used',
  `Get all commonly used licenses`,
  {
    featured: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/licenses',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'licenses/get',
  `Get a license`,
  {
    license: z.string(),
  },
  async (args, extra) => {
    try {
      const { license, ...queryParams } = args
      const url = `/licenses/${license}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('markdown/render', `Render a Markdown document`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/markdown',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('markdown/render-raw', `Render a Markdown document in raw mode`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/markdown/raw',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'apps/get-subscription-plan-for-account',
  `Get a subscription plan for an account`,
  {
    accountId: z.string(),
  },
  async (args, extra) => {
    try {
      const { accountId, ...queryParams } = args
      const url = `/marketplace_listing/accounts/${accountId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('accountId' in mappedParams) {
        mappedParams['account_id'] = mappedParams['accountId']
        delete mappedParams['accountId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('apps/list-plans', `List plans`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/marketplace_listing/plans',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'apps/list-accounts-for-plan',
  `List accounts for a plan`,
  {
    planId: z.string(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { planId, ...queryParams } = args
      const url = `/marketplace_listing/plans/${planId}/accounts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('planId' in mappedParams) {
        mappedParams['plan_id'] = mappedParams['planId']
        delete mappedParams['planId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/get-subscription-plan-for-account-stubbed',
  `Get a subscription plan for an account (stubbed)`,
  {
    accountId: z.string(),
  },
  async (args, extra) => {
    try {
      const { accountId, ...queryParams } = args
      const url = `/marketplace_listing/stubbed/accounts/${accountId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('accountId' in mappedParams) {
        mappedParams['account_id'] = mappedParams['accountId']
        delete mappedParams['accountId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('apps/list-plans-stubbed', `List plans (stubbed)`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/marketplace_listing/stubbed/plans',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'apps/list-accounts-for-plan-stubbed',
  `List accounts for a plan (stubbed)`,
  {
    planId: z.string(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { planId, ...queryParams } = args
      const url = `/marketplace_listing/stubbed/plans/${planId}/accounts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('planId' in mappedParams) {
        mappedParams['plan_id'] = mappedParams['planId']
        delete mappedParams['planId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('meta/get', `Get GitHub meta information`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/meta',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'activity/list-public-events-for-repo-network',
  `List public events for a network of repositories`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/networks/${owner}/${repo}/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-notifications-for-authenticated-user',
  `List notifications for the authenticated user`,
  {
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/notifications',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('activity/mark-notifications-as-read', `Mark notifications as read`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'PUT',
      url: '/notifications',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'activity/get-thread',
  `Get a thread`,
  {
    threadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { threadId, ...queryParams } = args
      const url = `/notifications/threads/${threadId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('threadId' in mappedParams) {
        mappedParams['thread_id'] = mappedParams['threadId']
        delete mappedParams['threadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/mark-thread-as-read',
  `Mark a thread as read`,
  {
    threadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { threadId, ...requestData } = args
      const url = `/notifications/threads/${threadId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('threadId' in mappedParams) {
        mappedParams['thread_id'] = mappedParams['threadId']
        delete mappedParams['threadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/mark-thread-as-done',
  `Mark a thread as done`,
  {
    threadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { threadId, ...queryParams } = args
      const url = `/notifications/threads/${threadId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('threadId' in mappedParams) {
        mappedParams['thread_id'] = mappedParams['threadId']
        delete mappedParams['threadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/get-thread-subscription-for-authenticated-user',
  `Get a thread subscription for the authenticated user`,
  {
    threadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { threadId, ...queryParams } = args
      const url = `/notifications/threads/${threadId}/subscription`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('threadId' in mappedParams) {
        mappedParams['thread_id'] = mappedParams['threadId']
        delete mappedParams['threadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/set-thread-subscription',
  `Set a thread subscription`,
  {
    threadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { threadId, ...requestData } = args
      const url = `/notifications/threads/${threadId}/subscription`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('threadId' in mappedParams) {
        mappedParams['thread_id'] = mappedParams['threadId']
        delete mappedParams['threadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/delete-thread-subscription',
  `Delete a thread subscription`,
  {
    threadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { threadId, ...queryParams } = args
      const url = `/notifications/threads/${threadId}/subscription`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('threadId' in mappedParams) {
        mappedParams['thread_id'] = mappedParams['threadId']
        delete mappedParams['threadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'meta/get-octocat',
  `Get Octocat`,
  {
    s: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/octocat',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('orgs/list', `List organizations`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/organizations',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'dependabot/repository-access-for-org',
  `Lists the repositories Dependabot can access in an organization`,
  {
    org: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/organizations/${org}/dependabot/repository-access`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/update-repository-access-for-org',
  `Updates Dependabot&#x27;s repository access list for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/organizations/${org}/dependabot/repository-access`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/set-repository-access-default-level',
  `Set the default repository access level for Dependabot`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/organizations/${org}/dependabot/repository-access/default-level`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'billing/get-github-billing-usage-report-org',
  `Get billing usage report for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/organizations/${org}/settings/billing/usage`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get',
  `Get an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/update',
  `Update an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/delete',
  `Delete an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-actions-cache-usage-for-org',
  `Get GitHub Actions cache usage for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/cache/usage`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-actions-cache-usage-by-repo-for-org',
  `List repositories with GitHub Actions cache usage for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/cache/usage-by-repository`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-hosted-runners-for-org',
  `List GitHub-hosted runners for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/hosted-runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-hosted-runner-for-org',
  `Create a GitHub-hosted runner for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/hosted-runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-hosted-runners-github-owned-images-for-org',
  `Get GitHub-owned images for GitHub-hosted runners in an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/hosted-runners/images/github-owned`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-hosted-runners-partner-images-for-org',
  `Get partner images for GitHub-hosted runners in an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/hosted-runners/images/partner`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-hosted-runners-limits-for-org',
  `Get limits on GitHub-hosted runners for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/hosted-runners/limits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-hosted-runners-machine-specs-for-org',
  `Get GitHub-hosted runners machine specs for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/hosted-runners/machine-sizes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-hosted-runners-platforms-for-org',
  `Get platforms for GitHub-hosted runners in an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/hosted-runners/platforms`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-hosted-runner-for-org',
  `Get a GitHub-hosted runner for an organization`,
  {
    org: z.string(),
    hostedRunnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hostedRunnerId, ...queryParams } = args
      const url = `/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hostedRunnerId' in mappedParams) {
        mappedParams['hosted_runner_id'] = mappedParams['hostedRunnerId']
        delete mappedParams['hostedRunnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/update-hosted-runner-for-org',
  `Update a GitHub-hosted runner for an organization`,
  {
    org: z.string(),
    hostedRunnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hostedRunnerId, ...requestData } = args
      const url = `/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hostedRunnerId' in mappedParams) {
        mappedParams['hosted_runner_id'] = mappedParams['hostedRunnerId']
        delete mappedParams['hostedRunnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-hosted-runner-for-org',
  `Delete a GitHub-hosted runner for an organization`,
  {
    org: z.string(),
    hostedRunnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hostedRunnerId, ...queryParams } = args
      const url = `/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hostedRunnerId' in mappedParams) {
        mappedParams['hosted_runner_id'] = mappedParams['hostedRunnerId']
        delete mappedParams['hostedRunnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'oidc/get-oidc-custom-sub-template-for-org',
  `Get the customization template for an OIDC subject claim for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/oidc/customization/sub`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'oidc/update-oidc-custom-sub-template-for-org',
  `Set the customization template for an OIDC subject claim for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/oidc/customization/sub`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-github-actions-permissions-organization',
  `Get GitHub Actions permissions for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/permissions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-github-actions-permissions-organization',
  `Set GitHub Actions permissions for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/permissions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-selected-repositories-enabled-github-actions-organization',
  `List selected repositories enabled for GitHub Actions in an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/permissions/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-selected-repositories-enabled-github-actions-organization',
  `Set selected repositories enabled for GitHub Actions in an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/permissions/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/enable-selected-repository-github-actions-organization',
  `Enable a selected repository for GitHub Actions in an organization`,
  {
    org: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, repositoryId, ...requestData } = args
      const url = `/orgs/${org}/actions/permissions/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/disable-selected-repository-github-actions-organization',
  `Disable a selected repository for GitHub Actions in an organization`,
  {
    org: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, repositoryId, ...queryParams } = args
      const url = `/orgs/${org}/actions/permissions/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-allowed-actions-organization',
  `Get allowed actions and reusable workflows for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/permissions/selected-actions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-allowed-actions-organization',
  `Set allowed actions and reusable workflows for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/permissions/selected-actions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-github-actions-default-workflow-permissions-organization',
  `Get default workflow permissions for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/permissions/workflow`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-github-actions-default-workflow-permissions-organization',
  `Set default workflow permissions for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/permissions/workflow`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-self-hosted-runner-groups-for-org',
  `List self-hosted runner groups for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/runner-groups`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-self-hosted-runner-group-for-org',
  `Create a self-hosted runner group for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/runner-groups`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-self-hosted-runner-group-for-org',
  `Get a self-hosted runner group for an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/update-self-hosted-runner-group-for-org',
  `Update a self-hosted runner group for an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, ...requestData } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-self-hosted-runner-group-from-org',
  `Delete a self-hosted runner group from an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-github-hosted-runners-in-group-for-org',
  `List GitHub-hosted runners in a group for an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}/hosted-runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-repo-access-to-self-hosted-runner-group-in-org',
  `List repository access to a self-hosted runner group in an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-repo-access-to-self-hosted-runner-group-in-org',
  `Set repository access for a self-hosted runner group in an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, ...requestData } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/add-repo-access-to-self-hosted-runner-group-in-org',
  `Add repository access to a self-hosted runner group in an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, repositoryId, ...requestData } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/remove-repo-access-to-self-hosted-runner-group-in-org',
  `Remove repository access to a self-hosted runner group in an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, repositoryId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-self-hosted-runners-in-group-for-org',
  `List self-hosted runners in a group for an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-self-hosted-runners-in-group-for-org',
  `Set self-hosted runners in a group for an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, ...requestData } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/add-self-hosted-runner-to-group-for-org',
  `Add a self-hosted runner to a group for an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, runnerId, ...requestData } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/remove-self-hosted-runner-from-group-for-org',
  `Remove a self-hosted runner from a group for an organization`,
  {
    org: z.string(),
    runnerGroupId: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerGroupId, runnerId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerGroupId' in mappedParams) {
        mappedParams['runner_group_id'] = mappedParams['runnerGroupId']
        delete mappedParams['runnerGroupId']
      }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-self-hosted-runners-for-org',
  `List self-hosted runners for an organization`,
  {
    org: z.string(),
    name: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-runner-applications-for-org',
  `List runner applications for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/runners/downloads`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/generate-runner-jitconfig-for-org',
  `Create configuration for a just-in-time runner for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/runners/generate-jitconfig`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-registration-token-for-org',
  `Create a registration token for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/runners/registration-token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-remove-token-for-org',
  `Create a remove token for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/runners/remove-token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-self-hosted-runner-for-org',
  `Get a self-hosted runner for an organization`,
  {
    org: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runners/${runnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-self-hosted-runner-from-org',
  `Delete a self-hosted runner from an organization`,
  {
    org: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runners/${runnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-labels-for-self-hosted-runner-for-org',
  `List labels for a self-hosted runner for an organization`,
  {
    org: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runners/${runnerId}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/add-custom-labels-to-self-hosted-runner-for-org',
  `Add custom labels to a self-hosted runner for an organization`,
  {
    org: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerId, ...requestData } = args
      const url = `/orgs/${org}/actions/runners/${runnerId}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-custom-labels-for-self-hosted-runner-for-org',
  `Set custom labels for a self-hosted runner for an organization`,
  {
    org: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerId, ...requestData } = args
      const url = `/orgs/${org}/actions/runners/${runnerId}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/remove-all-custom-labels-from-self-hosted-runner-for-org',
  `Remove all custom labels from a self-hosted runner for an organization`,
  {
    org: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerId, ...queryParams } = args
      const url = `/orgs/${org}/actions/runners/${runnerId}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/remove-custom-label-from-self-hosted-runner-for-org',
  `Remove a custom label from a self-hosted runner for an organization`,
  {
    org: z.string(),
    runnerId: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, runnerId, name, ...queryParams } = args
      const url = `/orgs/${org}/actions/runners/${runnerId}/labels/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-org-secrets',
  `List organization secrets`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/secrets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-org-public-key',
  `Get an organization public key`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/secrets/public-key`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-org-secret',
  `Get an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/actions/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-or-update-org-secret',
  `Create or update an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...requestData } = args
      const url = `/orgs/${org}/actions/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-org-secret',
  `Delete an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/actions/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-selected-repos-for-org-secret',
  `List selected repositories for an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/actions/secrets/${secretName}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-selected-repos-for-org-secret',
  `Set selected repositories for an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...requestData } = args
      const url = `/orgs/${org}/actions/secrets/${secretName}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/add-selected-repo-to-org-secret',
  `Add selected repository to an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, repositoryId, ...requestData } = args
      const url = `/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/remove-selected-repo-from-org-secret',
  `Remove selected repository from an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, repositoryId, ...queryParams } = args
      const url = `/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-org-variables',
  `List organization variables`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/actions/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-org-variable',
  `Create an organization variable`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/actions/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-org-variable',
  `Get an organization variable`,
  {
    org: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, name, ...queryParams } = args
      const url = `/orgs/${org}/actions/variables/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/update-org-variable',
  `Update an organization variable`,
  {
    org: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, name, ...requestData } = args
      const url = `/orgs/${org}/actions/variables/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-org-variable',
  `Delete an organization variable`,
  {
    org: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, name, ...queryParams } = args
      const url = `/orgs/${org}/actions/variables/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-selected-repos-for-org-variable',
  `List selected repositories for an organization variable`,
  {
    org: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, name, ...queryParams } = args
      const url = `/orgs/${org}/actions/variables/${name}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-selected-repos-for-org-variable',
  `Set selected repositories for an organization variable`,
  {
    org: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, name, ...requestData } = args
      const url = `/orgs/${org}/actions/variables/${name}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/add-selected-repo-to-org-variable',
  `Add selected repository to an organization variable`,
  {
    org: z.string(),
    name: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, name, repositoryId, ...requestData } = args
      const url = `/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/remove-selected-repo-from-org-variable',
  `Remove selected repository from an organization variable`,
  {
    org: z.string(),
    name: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, name, repositoryId, ...queryParams } = args
      const url = `/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-attestations-bulk',
  `List attestations by bulk subject digests`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/attestations/bulk-list`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/delete-attestations-bulk',
  `Delete attestations in bulk`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/attestations/delete-request`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/delete-attestations-by-subject-digest',
  `Delete attestations by subject digest`,
  {
    org: z.string(),
    subjectDigest: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, subjectDigest, ...queryParams } = args
      const url = `/orgs/${org}/attestations/digest/${subjectDigest}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('subjectDigest' in mappedParams) {
        mappedParams['subject_digest'] = mappedParams['subjectDigest']
        delete mappedParams['subjectDigest']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/delete-attestations-by-id',
  `Delete attestations by ID`,
  {
    org: z.string(),
    attestationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, attestationId, ...queryParams } = args
      const url = `/orgs/${org}/attestations/${attestationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('attestationId' in mappedParams) {
        mappedParams['attestation_id'] = mappedParams['attestationId']
        delete mappedParams['attestationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-attestations',
  `List attestations`,
  {
    org: z.string(),
    subjectDigest: z.string(),
    predicateType: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, subjectDigest, ...queryParams } = args
      const url = `/orgs/${org}/attestations/${subjectDigest}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('subjectDigest' in mappedParams) {
        mappedParams['subject_digest'] = mappedParams['subjectDigest']
        delete mappedParams['subjectDigest']
      }
      if ('predicateType' in mappedParams) {
        mappedParams['predicate_type'] = mappedParams['predicateType']
        delete mappedParams['predicateType']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-blocked-users',
  `List users blocked by an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/blocks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/check-blocked-user',
  `Check if a user is blocked by an organization`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/blocks/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/block-user',
  `Block a user from an organization`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...requestData } = args
      const url = `/orgs/${org}/blocks/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/unblock-user',
  `Unblock a user from an organization`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/blocks/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'campaigns/list-org-campaigns',
  `List campaigns for an organization`,
  {
    org: z.string(),
    state: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/campaigns`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'campaigns/create-campaign',
  `Create a campaign for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/campaigns`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'campaigns/get-campaign-summary',
  `Get a campaign for an organization`,
  {
    org: z.string(),
    campaignNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, campaignNumber, ...queryParams } = args
      const url = `/orgs/${org}/campaigns/${campaignNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('campaignNumber' in mappedParams) {
        mappedParams['campaign_number'] = mappedParams['campaignNumber']
        delete mappedParams['campaignNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'campaigns/update-campaign',
  `Update a campaign`,
  {
    org: z.string(),
    campaignNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, campaignNumber, ...requestData } = args
      const url = `/orgs/${org}/campaigns/${campaignNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('campaignNumber' in mappedParams) {
        mappedParams['campaign_number'] = mappedParams['campaignNumber']
        delete mappedParams['campaignNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'campaigns/delete-campaign',
  `Delete a campaign for an organization`,
  {
    org: z.string(),
    campaignNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, campaignNumber, ...queryParams } = args
      const url = `/orgs/${org}/campaigns/${campaignNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('campaignNumber' in mappedParams) {
        mappedParams['campaign_number'] = mappedParams['campaignNumber']
        delete mappedParams['campaignNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/list-alerts-for-org',
  `List code scanning alerts for an organization`,
  {
    org: z.string(),
    state: z.string().optional(),
    sort: z.string().optional(),
    severity: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/code-scanning/alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/get-configurations-for-org',
  `Get code security configurations for an organization`,
  {
    org: z.string(),
    targetType: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/code-security/configurations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('targetType' in mappedParams) {
        mappedParams['target_type'] = mappedParams['targetType']
        delete mappedParams['targetType']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/create-configuration',
  `Create a code security configuration`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/code-security/configurations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/get-default-configurations',
  `Get default code security configurations`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/code-security/configurations/defaults`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/detach-configuration',
  `Detach configurations from repositories`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/code-security/configurations/detach`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/get-configuration',
  `Get a code security configuration`,
  {
    org: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, configurationId, ...queryParams } = args
      const url = `/orgs/${org}/code-security/configurations/${configurationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/update-configuration',
  `Update a code security configuration`,
  {
    org: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, configurationId, ...requestData } = args
      const url = `/orgs/${org}/code-security/configurations/${configurationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/delete-configuration',
  `Delete a code security configuration`,
  {
    org: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, configurationId, ...queryParams } = args
      const url = `/orgs/${org}/code-security/configurations/${configurationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/attach-configuration',
  `Attach a configuration to repositories`,
  {
    org: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, configurationId, ...requestData } = args
      const url = `/orgs/${org}/code-security/configurations/${configurationId}/attach`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/set-configuration-as-default',
  `Set a code security configuration as a default for an organization`,
  {
    org: z.string(),
    configurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, configurationId, ...requestData } = args
      const url = `/orgs/${org}/code-security/configurations/${configurationId}/defaults`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/get-repositories-for-configuration',
  `Get repositories associated with a code security configuration`,
  {
    org: z.string(),
    configurationId: z.string(),
    perPage: z.string().optional(),
    status: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, configurationId, ...queryParams } = args
      const url = `/orgs/${org}/code-security/configurations/${configurationId}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('configurationId' in mappedParams) {
        mappedParams['configuration_id'] = mappedParams['configurationId']
        delete mappedParams['configurationId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/list-in-organization',
  `List codespaces for the organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/codespaces`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/set-codespaces-access',
  `Manage access control for organization codespaces`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/codespaces/access`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/set-codespaces-access-users',
  `Add users to Codespaces access for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/codespaces/access/selected_users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/delete-codespaces-access-users',
  `Remove users from Codespaces access for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/codespaces/access/selected_users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/list-org-secrets',
  `List organization secrets`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/codespaces/secrets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/get-org-public-key',
  `Get an organization public key`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/codespaces/secrets/public-key`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/get-org-secret',
  `Get an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/codespaces/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/create-or-update-org-secret',
  `Create or update an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...requestData } = args
      const url = `/orgs/${org}/codespaces/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/delete-org-secret',
  `Delete an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/codespaces/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/list-selected-repos-for-org-secret',
  `List selected repositories for an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/codespaces/secrets/${secretName}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/set-selected-repos-for-org-secret',
  `Set selected repositories for an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...requestData } = args
      const url = `/orgs/${org}/codespaces/secrets/${secretName}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/add-selected-repo-to-org-secret',
  `Add selected repository to an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, repositoryId, ...requestData } = args
      const url = `/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/remove-selected-repo-from-org-secret',
  `Remove selected repository from an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, repositoryId, ...queryParams } = args
      const url = `/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'copilot/get-copilot-organization-details',
  `Get Copilot seat information and settings for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/copilot/billing`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'copilot/list-copilot-seats',
  `List all Copilot seat assignments for an organization`,
  {
    org: z.string(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/copilot/billing/seats`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'copilot/add-copilot-seats-for-teams',
  `Add teams to the Copilot subscription for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/copilot/billing/selected_teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'copilot/cancel-copilot-seat-assignment-for-teams',
  `Remove teams from the Copilot subscription for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/copilot/billing/selected_teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'copilot/add-copilot-seats-for-users',
  `Add users to the Copilot subscription for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/copilot/billing/selected_users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'copilot/cancel-copilot-seat-assignment-for-users',
  `Remove users from the Copilot subscription for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/copilot/billing/selected_users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'copilot/copilot-metrics-for-organization',
  `Get Copilot metrics for an organization`,
  {
    org: z.string(),
    since: z.string().optional(),
    until: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/copilot/metrics`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/list-alerts-for-org',
  `List Dependabot alerts for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/dependabot/alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/list-org-secrets',
  `List organization secrets`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/dependabot/secrets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/get-org-public-key',
  `Get an organization public key`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/dependabot/secrets/public-key`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/get-org-secret',
  `Get an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/dependabot/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/create-or-update-org-secret',
  `Create or update an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...requestData } = args
      const url = `/orgs/${org}/dependabot/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/delete-org-secret',
  `Delete an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/dependabot/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/list-selected-repos-for-org-secret',
  `List selected repositories for an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/dependabot/secrets/${secretName}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/set-selected-repos-for-org-secret',
  `Set selected repositories for an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...requestData } = args
      const url = `/orgs/${org}/dependabot/secrets/${secretName}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/add-selected-repo-to-org-secret',
  `Add selected repository to an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, repositoryId, ...requestData } = args
      const url = `/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/remove-selected-repo-from-org-secret',
  `Remove selected repository from an organization secret`,
  {
    org: z.string(),
    secretName: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, repositoryId, ...queryParams } = args
      const url = `/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/list-docker-migration-conflicting-packages-for-organization',
  `Get list of conflicting packages during Docker migration for organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/docker/conflicts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-public-org-events',
  `List public organization events`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-failed-invitations',
  `List failed organization invitations`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/failed_invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-webhooks',
  `List organization webhooks`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/hooks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/create-webhook',
  `Create an organization webhook`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/hooks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-webhook',
  `Get an organization webhook`,
  {
    org: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hookId, ...queryParams } = args
      const url = `/orgs/${org}/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/update-webhook',
  `Update an organization webhook`,
  {
    org: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hookId, ...requestData } = args
      const url = `/orgs/${org}/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/delete-webhook',
  `Delete an organization webhook`,
  {
    org: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hookId, ...queryParams } = args
      const url = `/orgs/${org}/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-webhook-config-for-org',
  `Get a webhook configuration for an organization`,
  {
    org: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hookId, ...queryParams } = args
      const url = `/orgs/${org}/hooks/${hookId}/config`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/update-webhook-config-for-org',
  `Update a webhook configuration for an organization`,
  {
    org: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hookId, ...requestData } = args
      const url = `/orgs/${org}/hooks/${hookId}/config`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-webhook-deliveries',
  `List deliveries for an organization webhook`,
  {
    org: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hookId, ...queryParams } = args
      const url = `/orgs/${org}/hooks/${hookId}/deliveries`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-webhook-delivery',
  `Get a webhook delivery for an organization webhook`,
  {
    org: z.string(),
    hookId: z.string(),
    deliveryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hookId, deliveryId, ...queryParams } = args
      const url = `/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }
      if ('deliveryId' in mappedParams) {
        mappedParams['delivery_id'] = mappedParams['deliveryId']
        delete mappedParams['deliveryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/redeliver-webhook-delivery',
  `Redeliver a delivery for an organization webhook`,
  {
    org: z.string(),
    hookId: z.string(),
    deliveryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hookId, deliveryId, ...requestData } = args
      const url = `/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}/attempts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }
      if ('deliveryId' in mappedParams) {
        mappedParams['delivery_id'] = mappedParams['deliveryId']
        delete mappedParams['deliveryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/ping-webhook',
  `Ping an organization webhook`,
  {
    org: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, hookId, ...requestData } = args
      const url = `/orgs/${org}/hooks/${hookId}/pings`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'api-insights/get-route-stats-by-actor',
  `Get route stats by actor`,
  {
    org: z.string(),
    actorType: z.string(),
    actorId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, actorType, actorId, ...queryParams } = args
      const url = `/orgs/${org}/insights/api/route-stats/${actorType}/${actorId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('actorType' in mappedParams) {
        mappedParams['actor_type'] = mappedParams['actorType']
        delete mappedParams['actorType']
      }
      if ('actorId' in mappedParams) {
        mappedParams['actor_id'] = mappedParams['actorId']
        delete mappedParams['actorId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'api-insights/get-subject-stats',
  `Get subject stats`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/insights/api/subject-stats`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'api-insights/get-summary-stats',
  `Get summary stats`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/insights/api/summary-stats`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'api-insights/get-summary-stats-by-user',
  `Get summary stats by user`,
  {
    org: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, userId, ...queryParams } = args
      const url = `/orgs/${org}/insights/api/summary-stats/users/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'api-insights/get-summary-stats-by-actor',
  `Get summary stats by actor`,
  {
    org: z.string(),
    actorType: z.string(),
    actorId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, actorType, actorId, ...queryParams } = args
      const url = `/orgs/${org}/insights/api/summary-stats/${actorType}/${actorId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('actorType' in mappedParams) {
        mappedParams['actor_type'] = mappedParams['actorType']
        delete mappedParams['actorType']
      }
      if ('actorId' in mappedParams) {
        mappedParams['actor_id'] = mappedParams['actorId']
        delete mappedParams['actorId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'api-insights/get-time-stats',
  `Get time stats`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/insights/api/time-stats`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'api-insights/get-time-stats-by-user',
  `Get time stats by user`,
  {
    org: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, userId, ...queryParams } = args
      const url = `/orgs/${org}/insights/api/time-stats/users/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'api-insights/get-time-stats-by-actor',
  `Get time stats by actor`,
  {
    org: z.string(),
    actorType: z.string(),
    actorId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, actorType, actorId, ...queryParams } = args
      const url = `/orgs/${org}/insights/api/time-stats/${actorType}/${actorId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('actorType' in mappedParams) {
        mappedParams['actor_type'] = mappedParams['actorType']
        delete mappedParams['actorType']
      }
      if ('actorId' in mappedParams) {
        mappedParams['actor_id'] = mappedParams['actorId']
        delete mappedParams['actorId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'api-insights/get-user-stats',
  `Get user stats`,
  {
    org: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, userId, ...queryParams } = args
      const url = `/orgs/${org}/insights/api/user-stats/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/get-org-installation',
  `Get an organization installation for the authenticated app`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/installation`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-app-installations',
  `List app installations for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/installations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'interactions/get-restrictions-for-org',
  `Get interaction restrictions for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/interaction-limits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'interactions/set-restrictions-for-org',
  `Set interaction restrictions for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/interaction-limits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'interactions/remove-restrictions-for-org',
  `Remove interaction restrictions for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/interaction-limits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-pending-invitations',
  `List pending organization invitations`,
  {
    org: z.string(),
    role: z.string().optional(),
    invitationSource: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('invitationSource' in mappedParams) {
        mappedParams['invitation_source'] = mappedParams['invitationSource']
        delete mappedParams['invitationSource']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/create-invitation',
  `Create an organization invitation`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/cancel-invitation',
  `Cancel an organization invitation`,
  {
    org: z.string(),
    invitationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, invitationId, ...queryParams } = args
      const url = `/orgs/${org}/invitations/${invitationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('invitationId' in mappedParams) {
        mappedParams['invitation_id'] = mappedParams['invitationId']
        delete mappedParams['invitationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-invitation-teams',
  `List organization invitation teams`,
  {
    org: z.string(),
    invitationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, invitationId, ...queryParams } = args
      const url = `/orgs/${org}/invitations/${invitationId}/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('invitationId' in mappedParams) {
        mappedParams['invitation_id'] = mappedParams['invitationId']
        delete mappedParams['invitationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-issue-types',
  `List issue types for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/issue-types`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/create-issue-type',
  `Create issue type for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/issue-types`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/update-issue-type',
  `Update issue type for an organization`,
  {
    org: z.string(),
    issueTypeId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, issueTypeId, ...requestData } = args
      const url = `/orgs/${org}/issue-types/${issueTypeId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueTypeId' in mappedParams) {
        mappedParams['issue_type_id'] = mappedParams['issueTypeId']
        delete mappedParams['issueTypeId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/delete-issue-type',
  `Delete issue type for an organization`,
  {
    org: z.string(),
    issueTypeId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, issueTypeId, ...queryParams } = args
      const url = `/orgs/${org}/issue-types/${issueTypeId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueTypeId' in mappedParams) {
        mappedParams['issue_type_id'] = mappedParams['issueTypeId']
        delete mappedParams['issueTypeId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-for-org',
  `List organization issues assigned to the authenticated user`,
  {
    org: z.string(),
    filter: z.string().optional(),
    state: z.string().optional(),
    type: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/issues`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-members',
  `List organization members`,
  {
    org: z.string(),
    filter: z.string().optional(),
    role: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/check-membership-for-user',
  `Check organization membership for a user`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/members/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/remove-member',
  `Remove an organization member`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/members/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/get-codespaces-for-user-in-org',
  `List codespaces for a user in organization`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/members/${username}/codespaces`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/delete-from-organization',
  `Delete a codespace from the organization`,
  {
    org: z.string(),
    username: z.string(),
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, codespaceName, ...queryParams } = args
      const url = `/orgs/${org}/members/${username}/codespaces/${codespaceName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/stop-in-organization',
  `Stop a codespace for an organization user`,
  {
    org: z.string(),
    username: z.string(),
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, codespaceName, ...requestData } = args
      const url = `/orgs/${org}/members/${username}/codespaces/${codespaceName}/stop`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'copilot/get-copilot-seat-details-for-user',
  `Get Copilot seat assignment details for a user`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/members/${username}/copilot`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-membership-for-user',
  `Get organization membership for a user`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/memberships/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/set-membership-for-user',
  `Set organization membership for a user`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...requestData } = args
      const url = `/orgs/${org}/memberships/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/remove-membership-for-user',
  `Remove organization membership for a user`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/memberships/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/list-for-org',
  `List organization migrations`,
  {
    org: z.string(),
    exclude: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/migrations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/start-for-org',
  `Start an organization migration`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/migrations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/get-status-for-org',
  `Get an organization migration status`,
  {
    org: z.string(),
    migrationId: z.string(),
    exclude: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, migrationId, ...queryParams } = args
      const url = `/orgs/${org}/migrations/${migrationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/download-archive-for-org',
  `Download an organization migration archive`,
  {
    org: z.string(),
    migrationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, migrationId, ...queryParams } = args
      const url = `/orgs/${org}/migrations/${migrationId}/archive`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/delete-archive-for-org',
  `Delete an organization migration archive`,
  {
    org: z.string(),
    migrationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, migrationId, ...queryParams } = args
      const url = `/orgs/${org}/migrations/${migrationId}/archive`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/unlock-repo-for-org',
  `Unlock an organization repository`,
  {
    org: z.string(),
    migrationId: z.string(),
    repoName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, migrationId, repoName, ...queryParams } = args
      const url = `/orgs/${org}/migrations/${migrationId}/repos/${repoName}/lock`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }
      if ('repoName' in mappedParams) {
        mappedParams['repo_name'] = mappedParams['repoName']
        delete mappedParams['repoName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/list-repos-for-org',
  `List repositories in an organization migration`,
  {
    org: z.string(),
    migrationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, migrationId, ...queryParams } = args
      const url = `/orgs/${org}/migrations/${migrationId}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-org-roles',
  `Get all organization roles for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/organization-roles`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/revoke-all-org-roles-team',
  `Remove all organization roles for a team`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/organization-roles/teams/${teamSlug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/assign-team-to-org-role',
  `Assign an organization role to a team`,
  {
    org: z.string(),
    teamSlug: z.string(),
    roleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, roleId, ...requestData } = args
      const url = `/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('roleId' in mappedParams) {
        mappedParams['role_id'] = mappedParams['roleId']
        delete mappedParams['roleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/revoke-org-role-team',
  `Remove an organization role from a team`,
  {
    org: z.string(),
    teamSlug: z.string(),
    roleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, roleId, ...queryParams } = args
      const url = `/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('roleId' in mappedParams) {
        mappedParams['role_id'] = mappedParams['roleId']
        delete mappedParams['roleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/revoke-all-org-roles-user',
  `Remove all organization roles for a user`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/organization-roles/users/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/assign-user-to-org-role',
  `Assign an organization role to a user`,
  {
    org: z.string(),
    username: z.string(),
    roleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, roleId, ...requestData } = args
      const url = `/orgs/${org}/organization-roles/users/${username}/${roleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('roleId' in mappedParams) {
        mappedParams['role_id'] = mappedParams['roleId']
        delete mappedParams['roleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/revoke-org-role-user',
  `Remove an organization role from a user`,
  {
    org: z.string(),
    username: z.string(),
    roleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, roleId, ...queryParams } = args
      const url = `/orgs/${org}/organization-roles/users/${username}/${roleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('roleId' in mappedParams) {
        mappedParams['role_id'] = mappedParams['roleId']
        delete mappedParams['roleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-org-role',
  `Get an organization role`,
  {
    org: z.string(),
    roleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, roleId, ...queryParams } = args
      const url = `/orgs/${org}/organization-roles/${roleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('roleId' in mappedParams) {
        mappedParams['role_id'] = mappedParams['roleId']
        delete mappedParams['roleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-org-role-teams',
  `List teams that are assigned to an organization role`,
  {
    org: z.string(),
    roleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, roleId, ...queryParams } = args
      const url = `/orgs/${org}/organization-roles/${roleId}/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('roleId' in mappedParams) {
        mappedParams['role_id'] = mappedParams['roleId']
        delete mappedParams['roleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-org-role-users',
  `List users that are assigned to an organization role`,
  {
    org: z.string(),
    roleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, roleId, ...queryParams } = args
      const url = `/orgs/${org}/organization-roles/${roleId}/users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('roleId' in mappedParams) {
        mappedParams['role_id'] = mappedParams['roleId']
        delete mappedParams['roleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-outside-collaborators',
  `List outside collaborators for an organization`,
  {
    org: z.string(),
    filter: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/outside_collaborators`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/convert-member-to-outside-collaborator',
  `Convert an organization member to outside collaborator`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...requestData } = args
      const url = `/orgs/${org}/outside_collaborators/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/remove-outside-collaborator',
  `Remove outside collaborator from an organization`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/outside_collaborators/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/list-packages-for-organization',
  `List packages for an organization`,
  {
    org: z.string(),
    packageType: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/get-package-for-organization',
  `Get a package for an organization`,
  {
    org: z.string(),
    packageType: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, packageType, packageName, ...queryParams } = args
      const url = `/orgs/${org}/packages/${packageType}/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/delete-package-for-org',
  `Delete a package for an organization`,
  {
    org: z.string(),
    packageType: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, packageType, packageName, ...queryParams } = args
      const url = `/orgs/${org}/packages/${packageType}/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/restore-package-for-org',
  `Restore a package for an organization`,
  {
    org: z.string(),
    packageType: z.string(),
    packageName: z.string(),
    token: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, packageType, packageName, ...requestData } = args
      const url = `/orgs/${org}/packages/${packageType}/${packageName}/restore`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/get-all-package-versions-for-package-owned-by-org',
  `List package versions for a package owned by an organization`,
  {
    org: z.string(),
    packageType: z.string(),
    packageName: z.string(),
    state: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, packageType, packageName, ...queryParams } = args
      const url = `/orgs/${org}/packages/${packageType}/${packageName}/versions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/get-package-version-for-organization',
  `Get a package version for an organization`,
  {
    org: z.string(),
    packageType: z.string(),
    packageName: z.string(),
    packageVersionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, packageType, packageName, packageVersionId, ...queryParams } = args
      const url = `/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersionId' in mappedParams) {
        mappedParams['package_version_id'] = mappedParams['packageVersionId']
        delete mappedParams['packageVersionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/delete-package-version-for-org',
  `Delete package version for an organization`,
  {
    org: z.string(),
    packageType: z.string(),
    packageName: z.string(),
    packageVersionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, packageType, packageName, packageVersionId, ...queryParams } = args
      const url = `/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersionId' in mappedParams) {
        mappedParams['package_version_id'] = mappedParams['packageVersionId']
        delete mappedParams['packageVersionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/restore-package-version-for-org',
  `Restore package version for an organization`,
  {
    org: z.string(),
    packageType: z.string(),
    packageName: z.string(),
    packageVersionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, packageType, packageName, packageVersionId, ...requestData } = args
      const url = `/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersionId' in mappedParams) {
        mappedParams['package_version_id'] = mappedParams['packageVersionId']
        delete mappedParams['packageVersionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-pat-grant-requests',
  `List requests to access organization resources with fine-grained personal access tokens`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/personal-access-token-requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/review-pat-grant-requests-in-bulk',
  `Review requests to access organization resources with fine-grained personal access tokens`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/personal-access-token-requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/review-pat-grant-request',
  `Review a request to access organization resources with a fine-grained personal access token`,
  {
    org: z.string(),
    patRequestId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, patRequestId, ...requestData } = args
      const url = `/orgs/${org}/personal-access-token-requests/${patRequestId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('patRequestId' in mappedParams) {
        mappedParams['pat_request_id'] = mappedParams['patRequestId']
        delete mappedParams['patRequestId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-pat-grant-request-repositories',
  `List repositories requested to be accessed by a fine-grained personal access token`,
  {
    org: z.string(),
    patRequestId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, patRequestId, ...queryParams } = args
      const url = `/orgs/${org}/personal-access-token-requests/${patRequestId}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('patRequestId' in mappedParams) {
        mappedParams['pat_request_id'] = mappedParams['patRequestId']
        delete mappedParams['patRequestId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-pat-grants',
  `List fine-grained personal access tokens with access to organization resources`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/personal-access-tokens`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/update-pat-accesses',
  `Update the access to organization resources via fine-grained personal access tokens`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/personal-access-tokens`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/update-pat-access',
  `Update the access a fine-grained personal access token has to organization resources`,
  {
    org: z.string(),
    patId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, patId, ...requestData } = args
      const url = `/orgs/${org}/personal-access-tokens/${patId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('patId' in mappedParams) {
        mappedParams['pat_id'] = mappedParams['patId']
        delete mappedParams['patId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-pat-grant-repositories',
  `List repositories a fine-grained personal access token has access to`,
  {
    org: z.string(),
    patId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, patId, ...queryParams } = args
      const url = `/orgs/${org}/personal-access-tokens/${patId}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('patId' in mappedParams) {
        mappedParams['pat_id'] = mappedParams['patId']
        delete mappedParams['patId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'private-registries/list-org-private-registries',
  `List private registries for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/private-registries`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'private-registries/create-org-private-registry',
  `Create a private registry for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/private-registries`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'private-registries/get-org-public-key',
  `Get private registries public key for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/private-registries/public-key`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'private-registries/get-org-private-registry',
  `Get a private registry for an organization`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/private-registries/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'private-registries/update-org-private-registry',
  `Update a private registry for an organization`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...requestData } = args
      const url = `/orgs/${org}/private-registries/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'private-registries/delete-org-private-registry',
  `Delete a private registry for an organization`,
  {
    org: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, secretName, ...queryParams } = args
      const url = `/orgs/${org}/private-registries/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/list-for-org',
  `List organization projects`,
  {
    org: z.string(),
    state: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/create-for-org',
  `Create an organization project`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-all-custom-properties',
  `Get all custom properties for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/properties/schema`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/create-or-update-custom-properties',
  `Create or update custom properties for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/properties/schema`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-custom-property',
  `Get a custom property for an organization`,
  {
    org: z.string(),
    customPropertyName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, customPropertyName, ...queryParams } = args
      const url = `/orgs/${org}/properties/schema/${customPropertyName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('customPropertyName' in mappedParams) {
        mappedParams['custom_property_name'] = mappedParams['customPropertyName']
        delete mappedParams['customPropertyName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/create-or-update-custom-property',
  `Create or update a custom property for an organization`,
  {
    org: z.string(),
    customPropertyName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, customPropertyName, ...requestData } = args
      const url = `/orgs/${org}/properties/schema/${customPropertyName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('customPropertyName' in mappedParams) {
        mappedParams['custom_property_name'] = mappedParams['customPropertyName']
        delete mappedParams['customPropertyName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/remove-custom-property',
  `Remove a custom property for an organization`,
  {
    org: z.string(),
    customPropertyName: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, customPropertyName, ...queryParams } = args
      const url = `/orgs/${org}/properties/schema/${customPropertyName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('customPropertyName' in mappedParams) {
        mappedParams['custom_property_name'] = mappedParams['customPropertyName']
        delete mappedParams['customPropertyName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-custom-properties-values-for-repos',
  `List custom property values for organization repositories`,
  {
    org: z.string(),
    repositoryQuery: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/properties/values`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('repositoryQuery' in mappedParams) {
        mappedParams['repository_query'] = mappedParams['repositoryQuery']
        delete mappedParams['repositoryQuery']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/create-or-update-custom-properties-values-for-repos',
  `Create or update custom property values for organization repositories`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/properties/values`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-public-members',
  `List public organization members`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/public_members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/check-public-membership-for-user',
  `Check public organization membership for a user`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/public_members/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/set-public-membership-for-authenticated-user',
  `Set public organization membership for the authenticated user`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...requestData } = args
      const url = `/orgs/${org}/public_members/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/remove-public-membership-for-authenticated-user',
  `Remove public organization membership for the authenticated user`,
  {
    org: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, username, ...queryParams } = args
      const url = `/orgs/${org}/public_members/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-for-org',
  `List organization repositories`,
  {
    org: z.string(),
    type: z.string().optional(),
    sort: z.string().optional(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/repos`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-in-org',
  `Create an organization repository`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/repos`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-org-rulesets',
  `Get all organization repository rulesets`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/rulesets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-org-ruleset',
  `Create an organization repository ruleset`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/rulesets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-org-rule-suites',
  `List organization rule suites`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/rulesets/rule-suites`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-org-rule-suite',
  `Get an organization rule suite`,
  {
    org: z.string(),
    ruleSuiteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ruleSuiteId, ...queryParams } = args
      const url = `/orgs/${org}/rulesets/rule-suites/${ruleSuiteId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('ruleSuiteId' in mappedParams) {
        mappedParams['rule_suite_id'] = mappedParams['ruleSuiteId']
        delete mappedParams['ruleSuiteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-org-ruleset',
  `Get an organization repository ruleset`,
  {
    org: z.string(),
    rulesetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, rulesetId, ...queryParams } = args
      const url = `/orgs/${org}/rulesets/${rulesetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-org-ruleset',
  `Update an organization repository ruleset`,
  {
    org: z.string(),
    rulesetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, rulesetId, ...requestData } = args
      const url = `/orgs/${org}/rulesets/${rulesetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-org-ruleset',
  `Delete an organization repository ruleset`,
  {
    org: z.string(),
    rulesetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, rulesetId, ...queryParams } = args
      const url = `/orgs/${org}/rulesets/${rulesetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-org-ruleset-history',
  `Get organization ruleset history`,
  {
    org: z.string(),
    rulesetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, rulesetId, ...queryParams } = args
      const url = `/orgs/${org}/rulesets/${rulesetId}/history`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-org-ruleset-version',
  `Get organization ruleset version`,
  {
    org: z.string(),
    rulesetId: z.string(),
    versionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, rulesetId, versionId, ...queryParams } = args
      const url = `/orgs/${org}/rulesets/${rulesetId}/history/${versionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }
      if ('versionId' in mappedParams) {
        mappedParams['version_id'] = mappedParams['versionId']
        delete mappedParams['versionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'secret-scanning/list-alerts-for-org',
  `List secret scanning alerts for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/secret-scanning/alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'security-advisories/list-org-repository-advisories',
  `List repository security advisories for an organization`,
  {
    org: z.string(),
    sort: z.string().optional(),
    perPage: z.string().optional(),
    state: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/security-advisories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-security-manager-teams',
  `List security manager teams`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/security-managers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/add-security-manager-team',
  `Add a security manager team`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...requestData } = args
      const url = `/orgs/${org}/security-managers/teams/${teamSlug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/remove-security-manager-team',
  `Remove a security manager team`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/security-managers/teams/${teamSlug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'billing/get-github-actions-billing-org',
  `Get GitHub Actions billing for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/settings/billing/actions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'billing/get-github-packages-billing-org',
  `Get GitHub Packages billing for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/settings/billing/packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'billing/get-shared-storage-billing-org',
  `Get shared storage billing for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/settings/billing/shared-storage`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'hosted-compute/list-network-configurations-for-org',
  `List hosted compute network configurations for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/settings/network-configurations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'hosted-compute/create-network-configuration-for-org',
  `Create a hosted compute network configuration for an organization`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/settings/network-configurations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'hosted-compute/get-network-configuration-for-org',
  `Get a hosted compute network configuration for an organization`,
  {
    org: z.string(),
    networkConfigurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, networkConfigurationId, ...queryParams } = args
      const url = `/orgs/${org}/settings/network-configurations/${networkConfigurationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('networkConfigurationId' in mappedParams) {
        mappedParams['network_configuration_id'] = mappedParams['networkConfigurationId']
        delete mappedParams['networkConfigurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'hosted-compute/update-network-configuration-for-org',
  `Update a hosted compute network configuration for an organization`,
  {
    org: z.string(),
    networkConfigurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, networkConfigurationId, ...requestData } = args
      const url = `/orgs/${org}/settings/network-configurations/${networkConfigurationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('networkConfigurationId' in mappedParams) {
        mappedParams['network_configuration_id'] = mappedParams['networkConfigurationId']
        delete mappedParams['networkConfigurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'hosted-compute/delete-network-configuration-from-org',
  `Delete a hosted compute network configuration from an organization`,
  {
    org: z.string(),
    networkConfigurationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, networkConfigurationId, ...queryParams } = args
      const url = `/orgs/${org}/settings/network-configurations/${networkConfigurationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('networkConfigurationId' in mappedParams) {
        mappedParams['network_configuration_id'] = mappedParams['networkConfigurationId']
        delete mappedParams['networkConfigurationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'hosted-compute/get-network-settings-for-org',
  `Get a hosted compute network settings resource for an organization`,
  {
    org: z.string(),
    networkSettingsId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, networkSettingsId, ...queryParams } = args
      const url = `/orgs/${org}/settings/network-settings/${networkSettingsId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('networkSettingsId' in mappedParams) {
        mappedParams['network_settings_id'] = mappedParams['networkSettingsId']
        delete mappedParams['networkSettingsId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'copilot/copilot-metrics-for-team',
  `Get Copilot metrics for a team`,
  {
    org: z.string(),
    teamSlug: z.string(),
    since: z.string().optional(),
    until: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/team/${teamSlug}/copilot/metrics`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list',
  `List teams`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/orgs/${org}/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/create',
  `Create a team`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/orgs/${org}/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/get-by-name',
  `Get a team by name`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/update-in-org',
  `Update a team`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/delete-in-org',
  `Delete a team`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-discussions-in-org',
  `List discussions`,
  {
    org: z.string(),
    teamSlug: z.string(),
    pinned: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/create-discussion-in-org',
  `Create a discussion`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/get-discussion-in-org',
  `Get a discussion`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/update-discussion-in-org',
  `Update a discussion`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/delete-discussion-in-org',
  `Delete a discussion`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-discussion-comments-in-org',
  `List discussion comments`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/create-discussion-comment-in-org',
  `Create a discussion comment`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/get-discussion-comment-in-org',
  `Get a discussion comment`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, commentNumber, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/update-discussion-comment-in-org',
  `Update a discussion comment`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, commentNumber, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/delete-discussion-comment-in-org',
  `Delete a discussion comment`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, commentNumber, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/list-for-team-discussion-comment-in-org',
  `List reactions for a team discussion comment`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
    content: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, commentNumber, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/create-for-team-discussion-comment-in-org',
  `Create reaction for a team discussion comment`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, commentNumber, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/delete-for-team-discussion-comment',
  `Delete team discussion comment reaction`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
    reactionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, commentNumber, reactionId, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions/${reactionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }
      if ('reactionId' in mappedParams) {
        mappedParams['reaction_id'] = mappedParams['reactionId']
        delete mappedParams['reactionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/list-for-team-discussion-in-org',
  `List reactions for a team discussion`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
    content: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/create-for-team-discussion-in-org',
  `Create reaction for a team discussion`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/delete-for-team-discussion',
  `Delete team discussion reaction`,
  {
    org: z.string(),
    teamSlug: z.string(),
    discussionNumber: z.string(),
    reactionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, discussionNumber, reactionId, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions/${reactionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('reactionId' in mappedParams) {
        mappedParams['reaction_id'] = mappedParams['reactionId']
        delete mappedParams['reactionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-pending-invitations-in-org',
  `List pending team invitations`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-members-in-org',
  `List team members`,
  {
    org: z.string(),
    teamSlug: z.string(),
    role: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/get-membership-for-user-in-org',
  `Get team membership for a user`,
  {
    org: z.string(),
    teamSlug: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, username, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/memberships/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/add-or-update-membership-for-user-in-org',
  `Add or update team membership for a user`,
  {
    org: z.string(),
    teamSlug: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, username, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}/memberships/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/remove-membership-for-user-in-org',
  `Remove team membership for a user`,
  {
    org: z.string(),
    teamSlug: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, username, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/memberships/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-projects-in-org',
  `List team projects`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/check-permissions-for-project-in-org',
  `Check team permissions for a project`,
  {
    org: z.string(),
    teamSlug: z.string(),
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, projectId, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/add-or-update-project-permissions-in-org',
  `Add or update team project permissions`,
  {
    org: z.string(),
    teamSlug: z.string(),
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, projectId, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/remove-project-in-org',
  `Remove a project from a team`,
  {
    org: z.string(),
    teamSlug: z.string(),
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, projectId, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-repos-in-org',
  `List team repositories`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/repos`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/check-permissions-for-repo-in-org',
  `Check team permissions for a repository`,
  {
    org: z.string(),
    teamSlug: z.string(),
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, owner, repo, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/add-or-update-repo-permissions-in-org',
  `Add or update team repository permissions`,
  {
    org: z.string(),
    teamSlug: z.string(),
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, owner, repo, ...requestData } = args
      const url = `/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/remove-repo-in-org',
  `Remove a repository from a team`,
  {
    org: z.string(),
    teamSlug: z.string(),
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, owner, repo, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-child-in-org',
  `List child teams`,
  {
    org: z.string(),
    teamSlug: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, teamSlug, ...queryParams } = args
      const url = `/orgs/${org}/teams/${teamSlug}/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamSlug' in mappedParams) {
        mappedParams['team_slug'] = mappedParams['teamSlug']
        delete mappedParams['teamSlug']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/enable-or-disable-security-product-on-all-org-repos',
  `Enable or disable a security feature for an organization`,
  {
    org: z.string(),
    securityProduct: z.string(),
    enablement: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, securityProduct, enablement, ...requestData } = args
      const url = `/orgs/${org}/${securityProduct}/${enablement}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('securityProduct' in mappedParams) {
        mappedParams['security_product'] = mappedParams['securityProduct']
        delete mappedParams['securityProduct']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/get-card',
  `Get a project card`,
  {
    cardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { cardId, ...queryParams } = args
      const url = `/projects/columns/cards/${cardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('cardId' in mappedParams) {
        mappedParams['card_id'] = mappedParams['cardId']
        delete mappedParams['cardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/update-card',
  `Update an existing project card`,
  {
    cardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { cardId, ...requestData } = args
      const url = `/projects/columns/cards/${cardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('cardId' in mappedParams) {
        mappedParams['card_id'] = mappedParams['cardId']
        delete mappedParams['cardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/delete-card',
  `Delete a project card`,
  {
    cardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { cardId, ...queryParams } = args
      const url = `/projects/columns/cards/${cardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('cardId' in mappedParams) {
        mappedParams['card_id'] = mappedParams['cardId']
        delete mappedParams['cardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/move-card',
  `Move a project card`,
  {
    cardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { cardId, ...requestData } = args
      const url = `/projects/columns/cards/${cardId}/moves`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('cardId' in mappedParams) {
        mappedParams['card_id'] = mappedParams['cardId']
        delete mappedParams['cardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/get-column',
  `Get a project column`,
  {
    columnId: z.string(),
  },
  async (args, extra) => {
    try {
      const { columnId, ...queryParams } = args
      const url = `/projects/columns/${columnId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('columnId' in mappedParams) {
        mappedParams['column_id'] = mappedParams['columnId']
        delete mappedParams['columnId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/update-column',
  `Update an existing project column`,
  {
    columnId: z.string(),
  },
  async (args, extra) => {
    try {
      const { columnId, ...requestData } = args
      const url = `/projects/columns/${columnId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('columnId' in mappedParams) {
        mappedParams['column_id'] = mappedParams['columnId']
        delete mappedParams['columnId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/delete-column',
  `Delete a project column`,
  {
    columnId: z.string(),
  },
  async (args, extra) => {
    try {
      const { columnId, ...queryParams } = args
      const url = `/projects/columns/${columnId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('columnId' in mappedParams) {
        mappedParams['column_id'] = mappedParams['columnId']
        delete mappedParams['columnId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/list-cards',
  `List project cards`,
  {
    columnId: z.string(),
    archivedState: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { columnId, ...queryParams } = args
      const url = `/projects/columns/${columnId}/cards`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('columnId' in mappedParams) {
        mappedParams['column_id'] = mappedParams['columnId']
        delete mappedParams['columnId']
      }
      if ('archivedState' in mappedParams) {
        mappedParams['archived_state'] = mappedParams['archivedState']
        delete mappedParams['archivedState']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/create-card',
  `Create a project card`,
  {
    columnId: z.string(),
  },
  async (args, extra) => {
    try {
      const { columnId, ...requestData } = args
      const url = `/projects/columns/${columnId}/cards`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('columnId' in mappedParams) {
        mappedParams['column_id'] = mappedParams['columnId']
        delete mappedParams['columnId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/move-column',
  `Move a project column`,
  {
    columnId: z.string(),
  },
  async (args, extra) => {
    try {
      const { columnId, ...requestData } = args
      const url = `/projects/columns/${columnId}/moves`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('columnId' in mappedParams) {
        mappedParams['column_id'] = mappedParams['columnId']
        delete mappedParams['columnId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/get',
  `Get a project`,
  {
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/update',
  `Update a project`,
  {
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...requestData } = args
      const url = `/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/delete',
  `Delete a project`,
  {
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/list-collaborators',
  `List project collaborators`,
  {
    projectId: z.string(),
    affiliation: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/projects/${projectId}/collaborators`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/add-collaborator',
  `Add project collaborator`,
  {
    projectId: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, username, ...requestData } = args
      const url = `/projects/${projectId}/collaborators/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/remove-collaborator',
  `Remove user as a collaborator`,
  {
    projectId: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, username, ...queryParams } = args
      const url = `/projects/${projectId}/collaborators/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/get-permission-for-user',
  `Get project permission for a user`,
  {
    projectId: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, username, ...queryParams } = args
      const url = `/projects/${projectId}/collaborators/${username}/permission`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/list-columns',
  `List project columns`,
  {
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/projects/${projectId}/columns`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/create-column',
  `Create a project column`,
  {
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...requestData } = args
      const url = `/projects/${projectId}/columns`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('rate-limit/get', `Get rate limit status for the authenticated user`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/rate_limit',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'repos/get',
  `Get a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update',
  `Update a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete',
  `Delete a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-artifacts-for-repo',
  `List artifacts for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/artifacts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-artifact',
  `Get an artifact`,
  {
    owner: z.string(),
    repo: z.string(),
    artifactId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, artifactId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/artifacts/${artifactId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('artifactId' in mappedParams) {
        mappedParams['artifact_id'] = mappedParams['artifactId']
        delete mappedParams['artifactId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-artifact',
  `Delete an artifact`,
  {
    owner: z.string(),
    repo: z.string(),
    artifactId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, artifactId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/artifacts/${artifactId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('artifactId' in mappedParams) {
        mappedParams['artifact_id'] = mappedParams['artifactId']
        delete mappedParams['artifactId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/download-artifact',
  `Download an artifact`,
  {
    owner: z.string(),
    repo: z.string(),
    artifactId: z.string(),
    archiveFormat: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, artifactId, archiveFormat, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/artifacts/${artifactId}/${archiveFormat}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('artifactId' in mappedParams) {
        mappedParams['artifact_id'] = mappedParams['artifactId']
        delete mappedParams['artifactId']
      }
      if ('archiveFormat' in mappedParams) {
        mappedParams['archive_format'] = mappedParams['archiveFormat']
        delete mappedParams['archiveFormat']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-actions-cache-usage',
  `Get GitHub Actions cache usage for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/cache/usage`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-actions-cache-list',
  `List GitHub Actions caches for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/caches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-actions-cache-by-key',
  `Delete GitHub Actions caches for a repository (using a cache key)`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/caches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-actions-cache-by-id',
  `Delete a GitHub Actions cache for a repository (using a cache ID)`,
  {
    owner: z.string(),
    repo: z.string(),
    cacheId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, cacheId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/caches/${cacheId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('cacheId' in mappedParams) {
        mappedParams['cache_id'] = mappedParams['cacheId']
        delete mappedParams['cacheId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-job-for-workflow-run',
  `Get a job for a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, jobId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/jobs/${jobId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/download-job-logs-for-workflow-run',
  `Download job logs for a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, jobId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/jobs/${jobId}/logs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/re-run-job-for-workflow-run',
  `Re-run a job from a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, jobId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/jobs/${jobId}/rerun`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-custom-oidc-sub-claim-for-repo',
  `Get the customization template for an OIDC subject claim for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/oidc/customization/sub`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-custom-oidc-sub-claim-for-repo',
  `Set the customization template for an OIDC subject claim for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/oidc/customization/sub`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-repo-organization-secrets',
  `List repository organization secrets`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/organization-secrets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-repo-organization-variables',
  `List repository organization variables`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/organization-variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-github-actions-permissions-repository',
  `Get GitHub Actions permissions for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/permissions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-github-actions-permissions-repository',
  `Set GitHub Actions permissions for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/permissions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-workflow-access-to-repository',
  `Get the level of access for workflows outside of the repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/permissions/access`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-workflow-access-to-repository',
  `Set the level of access for workflows outside of the repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/permissions/access`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-allowed-actions-repository',
  `Get allowed actions and reusable workflows for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/permissions/selected-actions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-allowed-actions-repository',
  `Set allowed actions and reusable workflows for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/permissions/selected-actions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-github-actions-default-workflow-permissions-repository',
  `Get default workflow permissions for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/permissions/workflow`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-github-actions-default-workflow-permissions-repository',
  `Set default workflow permissions for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/permissions/workflow`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-self-hosted-runners-for-repo',
  `List self-hosted runners for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    name: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-runner-applications-for-repo',
  `List runner applications for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runners/downloads`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/generate-runner-jitconfig-for-repo',
  `Create configuration for a just-in-time runner for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runners/generate-jitconfig`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-registration-token-for-repo',
  `Create a registration token for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runners/registration-token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-remove-token-for-repo',
  `Create a remove token for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runners/remove-token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-self-hosted-runner-for-repo',
  `Get a self-hosted runner for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runnerId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runners/${runnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-self-hosted-runner-from-repo',
  `Delete a self-hosted runner from a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runnerId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runners/${runnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-labels-for-self-hosted-runner-for-repo',
  `List labels for a self-hosted runner for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runnerId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/add-custom-labels-to-self-hosted-runner-for-repo',
  `Add custom labels to a self-hosted runner for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runnerId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/set-custom-labels-for-self-hosted-runner-for-repo',
  `Set custom labels for a self-hosted runner for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runnerId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/remove-all-custom-labels-from-self-hosted-runner-for-repo',
  `Remove all custom labels from a self-hosted runner for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runnerId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/remove-custom-label-from-self-hosted-runner-for-repo',
  `Remove a custom label from a self-hosted runner for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    runnerId: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runnerId, name, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-workflow-runs-for-repo',
  `List workflow runs for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-workflow-run',
  `Get a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-workflow-run',
  `Delete a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-reviews-for-run',
  `Get the review history for a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/approvals`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/approve-workflow-run',
  `Approve a workflow run for a fork pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/approve`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-workflow-run-artifacts',
  `List workflow run artifacts`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/artifacts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-workflow-run-attempt',
  `Get a workflow run attempt`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
    attemptNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, attemptNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }
      if ('attemptNumber' in mappedParams) {
        mappedParams['attempt_number'] = mappedParams['attemptNumber']
        delete mappedParams['attemptNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-jobs-for-workflow-run-attempt',
  `List jobs for a workflow run attempt`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
    attemptNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, attemptNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/jobs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }
      if ('attemptNumber' in mappedParams) {
        mappedParams['attempt_number'] = mappedParams['attemptNumber']
        delete mappedParams['attemptNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/download-workflow-run-attempt-logs',
  `Download workflow run attempt logs`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
    attemptNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, attemptNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/logs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }
      if ('attemptNumber' in mappedParams) {
        mappedParams['attempt_number'] = mappedParams['attemptNumber']
        delete mappedParams['attemptNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/cancel-workflow-run',
  `Cancel a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/cancel`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/review-custom-gates-for-run',
  `Review custom deployment protection rules for a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/deployment_protection_rule`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/force-cancel-workflow-run',
  `Force cancel a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/force-cancel`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-jobs-for-workflow-run',
  `List jobs for a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
    filter: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/jobs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/download-workflow-run-logs',
  `Download workflow run logs`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/logs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-workflow-run-logs',
  `Delete workflow run logs`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/logs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-pending-deployments-for-run',
  `Get pending deployments for a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/review-pending-deployments-for-run',
  `Review pending deployments for a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/re-run-workflow',
  `Re-run a workflow`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/rerun`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/re-run-workflow-failed-jobs',
  `Re-run failed jobs from a workflow run`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/rerun-failed-jobs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-workflow-run-usage',
  `Get workflow run usage`,
  {
    owner: z.string(),
    repo: z.string(),
    runId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, runId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/runs/${runId}/timing`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runId' in mappedParams) {
        mappedParams['run_id'] = mappedParams['runId']
        delete mappedParams['runId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-repo-secrets',
  `List repository secrets`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/secrets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-repo-public-key',
  `Get a repository public key`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/secrets/public-key`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-repo-secret',
  `Get a repository secret`,
  {
    owner: z.string(),
    repo: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, secretName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-or-update-repo-secret',
  `Create or update a repository secret`,
  {
    owner: z.string(),
    repo: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, secretName, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-repo-secret',
  `Delete a repository secret`,
  {
    owner: z.string(),
    repo: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, secretName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-repo-variables',
  `List repository variables`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-repo-variable',
  `Create a repository variable`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-repo-variable',
  `Get a repository variable`,
  {
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, name, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/variables/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/update-repo-variable',
  `Update a repository variable`,
  {
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, name, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/variables/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-repo-variable',
  `Delete a repository variable`,
  {
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, name, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/variables/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-repo-workflows',
  `List repository workflows`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/workflows`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-workflow',
  `Get a workflow`,
  {
    owner: z.string(),
    repo: z.string(),
    workflowId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, workflowId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/workflows/${workflowId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('workflowId' in mappedParams) {
        mappedParams['workflow_id'] = mappedParams['workflowId']
        delete mappedParams['workflowId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/disable-workflow',
  `Disable a workflow`,
  {
    owner: z.string(),
    repo: z.string(),
    workflowId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, workflowId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/workflows/${workflowId}/disable`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('workflowId' in mappedParams) {
        mappedParams['workflow_id'] = mappedParams['workflowId']
        delete mappedParams['workflowId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-workflow-dispatch',
  `Create a workflow dispatch event`,
  {
    owner: z.string(),
    repo: z.string(),
    workflowId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, workflowId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/workflows/${workflowId}/dispatches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('workflowId' in mappedParams) {
        mappedParams['workflow_id'] = mappedParams['workflowId']
        delete mappedParams['workflowId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/enable-workflow',
  `Enable a workflow`,
  {
    owner: z.string(),
    repo: z.string(),
    workflowId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, workflowId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/actions/workflows/${workflowId}/enable`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('workflowId' in mappedParams) {
        mappedParams['workflow_id'] = mappedParams['workflowId']
        delete mappedParams['workflowId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-workflow-runs',
  `List workflow runs for a workflow`,
  {
    owner: z.string(),
    repo: z.string(),
    workflowId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, workflowId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/workflows/${workflowId}/runs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('workflowId' in mappedParams) {
        mappedParams['workflow_id'] = mappedParams['workflowId']
        delete mappedParams['workflowId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-workflow-usage',
  `Get workflow usage`,
  {
    owner: z.string(),
    repo: z.string(),
    workflowId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, workflowId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/actions/workflows/${workflowId}/timing`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('workflowId' in mappedParams) {
        mappedParams['workflow_id'] = mappedParams['workflowId']
        delete mappedParams['workflowId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-activities',
  `List repository activities`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string().optional(),
    actor: z.string().optional(),
    timePeriod: z.string().optional(),
    activityType: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/activity`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('timePeriod' in mappedParams) {
        mappedParams['time_period'] = mappedParams['timePeriod']
        delete mappedParams['timePeriod']
      }
      if ('activityType' in mappedParams) {
        mappedParams['activity_type'] = mappedParams['activityType']
        delete mappedParams['activityType']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-assignees',
  `List assignees`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/assignees`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/check-user-can-be-assigned',
  `Check if a user can be assigned`,
  {
    owner: z.string(),
    repo: z.string(),
    assignee: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, assignee, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/assignees/${assignee}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-attestation',
  `Create an attestation`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/attestations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-attestations',
  `List attestations`,
  {
    owner: z.string(),
    repo: z.string(),
    subjectDigest: z.string(),
    predicateType: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, subjectDigest, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/attestations/${subjectDigest}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('subjectDigest' in mappedParams) {
        mappedParams['subject_digest'] = mappedParams['subjectDigest']
        delete mappedParams['subjectDigest']
      }
      if ('predicateType' in mappedParams) {
        mappedParams['predicate_type'] = mappedParams['predicateType']
        delete mappedParams['predicateType']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-autolinks',
  `Get all autolinks of a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/autolinks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-autolink',
  `Create an autolink reference for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/autolinks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-autolink',
  `Get an autolink reference of a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    autolinkId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, autolinkId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/autolinks/${autolinkId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('autolinkId' in mappedParams) {
        mappedParams['autolink_id'] = mappedParams['autolinkId']
        delete mappedParams['autolinkId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-autolink',
  `Delete an autolink reference from a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    autolinkId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, autolinkId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/autolinks/${autolinkId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('autolinkId' in mappedParams) {
        mappedParams['autolink_id'] = mappedParams['autolinkId']
        delete mappedParams['autolinkId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/check-automated-security-fixes',
  `Check if Dependabot security updates are enabled for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/automated-security-fixes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/enable-automated-security-fixes',
  `Enable Dependabot security updates`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/automated-security-fixes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/disable-automated-security-fixes',
  `Disable Dependabot security updates`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/automated-security-fixes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-branches',
  `List branches`,
  {
    owner: z.string(),
    repo: z.string(),
    protected: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-branch',
  `Get a branch`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-branch-protection',
  `Get branch protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-branch-protection',
  `Update branch protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-branch-protection',
  `Delete branch protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-admin-branch-protection',
  `Get admin branch protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/set-admin-branch-protection',
  `Set admin branch protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-admin-branch-protection',
  `Delete admin branch protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-pull-request-review-protection',
  `Get pull request review protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-pull-request-review-protection',
  `Update pull request review protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-pull-request-review-protection',
  `Delete pull request review protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-commit-signature-protection',
  `Get commit signature protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-commit-signature-protection',
  `Create commit signature protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-commit-signature-protection',
  `Delete commit signature protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-status-checks-protection',
  `Get status checks protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-status-check-protection',
  `Update status check protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/remove-status-check-protection',
  `Remove status check protection`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-all-status-check-contexts',
  `Get all status check contexts`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/add-status-check-contexts',
  `Add status check contexts`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/set-status-check-contexts',
  `Set status check contexts`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/remove-status-check-contexts',
  `Remove status check contexts`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-access-restrictions',
  `Get access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-access-restrictions',
  `Delete access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-apps-with-access-to-protected-branch',
  `Get apps with access to the protected branch`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/add-app-access-restrictions',
  `Add app access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/set-app-access-restrictions',
  `Set app access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/remove-app-access-restrictions',
  `Remove app access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-teams-with-access-to-protected-branch',
  `Get teams with access to the protected branch`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/add-team-access-restrictions',
  `Add team access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/set-team-access-restrictions',
  `Set team access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/remove-team-access-restrictions',
  `Remove team access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-users-with-access-to-protected-branch',
  `Get users with access to the protected branch`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/add-user-access-restrictions',
  `Add user access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/set-user-access-restrictions',
  `Set user access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/remove-user-access-restrictions',
  `Remove user access restrictions`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/rename-branch',
  `Rename a branch`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...requestData } = args
      const url = `/repos/${owner}/${repo}/branches/${branch}/rename`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/create',
  `Create a check run`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/check-runs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/get',
  `Get a check run`,
  {
    owner: z.string(),
    repo: z.string(),
    checkRunId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, checkRunId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/check-runs/${checkRunId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('checkRunId' in mappedParams) {
        mappedParams['check_run_id'] = mappedParams['checkRunId']
        delete mappedParams['checkRunId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/update',
  `Update a check run`,
  {
    owner: z.string(),
    repo: z.string(),
    checkRunId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, checkRunId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/check-runs/${checkRunId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('checkRunId' in mappedParams) {
        mappedParams['check_run_id'] = mappedParams['checkRunId']
        delete mappedParams['checkRunId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/list-annotations',
  `List check run annotations`,
  {
    owner: z.string(),
    repo: z.string(),
    checkRunId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, checkRunId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/check-runs/${checkRunId}/annotations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('checkRunId' in mappedParams) {
        mappedParams['check_run_id'] = mappedParams['checkRunId']
        delete mappedParams['checkRunId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/rerequest-run',
  `Rerequest a check run`,
  {
    owner: z.string(),
    repo: z.string(),
    checkRunId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, checkRunId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/check-runs/${checkRunId}/rerequest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('checkRunId' in mappedParams) {
        mappedParams['check_run_id'] = mappedParams['checkRunId']
        delete mappedParams['checkRunId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/create-suite',
  `Create a check suite`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/check-suites`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/set-suites-preferences',
  `Update repository preferences for check suites`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/check-suites/preferences`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/get-suite',
  `Get a check suite`,
  {
    owner: z.string(),
    repo: z.string(),
    checkSuiteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, checkSuiteId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/check-suites/${checkSuiteId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('checkSuiteId' in mappedParams) {
        mappedParams['check_suite_id'] = mappedParams['checkSuiteId']
        delete mappedParams['checkSuiteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/list-for-suite',
  `List check runs in a check suite`,
  {
    owner: z.string(),
    repo: z.string(),
    checkSuiteId: z.string(),
    filter: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, checkSuiteId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/check-suites/${checkSuiteId}/check-runs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('checkSuiteId' in mappedParams) {
        mappedParams['check_suite_id'] = mappedParams['checkSuiteId']
        delete mappedParams['checkSuiteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/rerequest-suite',
  `Rerequest a check suite`,
  {
    owner: z.string(),
    repo: z.string(),
    checkSuiteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, checkSuiteId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/check-suites/${checkSuiteId}/rerequest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('checkSuiteId' in mappedParams) {
        mappedParams['check_suite_id'] = mappedParams['checkSuiteId']
        delete mappedParams['checkSuiteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/list-alerts-for-repo',
  `List code scanning alerts for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    sort: z.string().optional(),
    state: z.string().optional(),
    severity: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/get-alert',
  `Get a code scanning alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/update-alert',
  `Update a code scanning alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/get-autofix',
  `Get the status of an autofix for a code scanning alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/create-autofix',
  `Create an autofix for a code scanning alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/commit-autofix',
  `Commit an autofix for a code scanning alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix/commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/list-alert-instances',
  `List instances of a code scanning alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/instances`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/list-recent-analyses',
  `List code scanning analyses for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string().optional(),
    sarifId: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/analyses`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('sarifId' in mappedParams) {
        mappedParams['sarif_id'] = mappedParams['sarifId']
        delete mappedParams['sarifId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/get-analysis',
  `Get a code scanning analysis for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    analysisId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, analysisId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('analysisId' in mappedParams) {
        mappedParams['analysis_id'] = mappedParams['analysisId']
        delete mappedParams['analysisId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/delete-analysis',
  `Delete a code scanning analysis from a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    analysisId: z.string(),
    confirmDelete: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, analysisId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('analysisId' in mappedParams) {
        mappedParams['analysis_id'] = mappedParams['analysisId']
        delete mappedParams['analysisId']
      }
      if ('confirmDelete' in mappedParams) {
        mappedParams['confirm_delete'] = mappedParams['confirmDelete']
        delete mappedParams['confirmDelete']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/list-codeql-databases',
  `List CodeQL databases for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/codeql/databases`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/get-codeql-database',
  `Get a CodeQL database for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    language: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, language, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/delete-codeql-database',
  `Delete a CodeQL database`,
  {
    owner: z.string(),
    repo: z.string(),
    language: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, language, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/create-variant-analysis',
  `Create a CodeQL variant analysis`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/get-variant-analysis',
  `Get the summary of a CodeQL variant analysis`,
  {
    owner: z.string(),
    repo: z.string(),
    codeqlVariantAnalysisId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, codeqlVariantAnalysisId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('codeqlVariantAnalysisId' in mappedParams) {
        mappedParams['codeql_variant_analysis_id'] = mappedParams['codeqlVariantAnalysisId']
        delete mappedParams['codeqlVariantAnalysisId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/get-variant-analysis-repo-task',
  `Get the analysis status of a repository in a CodeQL variant analysis`,
  {
    owner: z.string(),
    repo: z.string(),
    codeqlVariantAnalysisId: z.string(),
    repoOwner: z.string(),
    repoName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, codeqlVariantAnalysisId, repoOwner, repoName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}/repos/${repoOwner}/${repoName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('codeqlVariantAnalysisId' in mappedParams) {
        mappedParams['codeql_variant_analysis_id'] = mappedParams['codeqlVariantAnalysisId']
        delete mappedParams['codeqlVariantAnalysisId']
      }
      if ('repoOwner' in mappedParams) {
        mappedParams['repo_owner'] = mappedParams['repoOwner']
        delete mappedParams['repoOwner']
      }
      if ('repoName' in mappedParams) {
        mappedParams['repo_name'] = mappedParams['repoName']
        delete mappedParams['repoName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/get-default-setup',
  `Get a code scanning default setup configuration`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/default-setup`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/update-default-setup',
  `Update a code scanning default setup configuration`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/code-scanning/default-setup`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/upload-sarif',
  `Upload an analysis as SARIF data`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/code-scanning/sarifs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-scanning/get-sarif',
  `Get information about a SARIF upload`,
  {
    owner: z.string(),
    repo: z.string(),
    sarifId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, sarifId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-scanning/sarifs/${sarifId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('sarifId' in mappedParams) {
        mappedParams['sarif_id'] = mappedParams['sarifId']
        delete mappedParams['sarifId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'code-security/get-configuration-for-repository',
  `Get the code security configuration associated with a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/code-security-configuration`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/codeowners-errors',
  `List CODEOWNERS errors`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codeowners/errors`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/list-in-repository-for-authenticated-user',
  `List codespaces in a repository for the authenticated user`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codespaces`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/create-with-repo-for-authenticated-user',
  `Create a codespace in a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/codespaces`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/list-devcontainers-in-repository-for-authenticated-user',
  `List devcontainer configurations in a repository for the authenticated user`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codespaces/devcontainers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/repo-machines-for-authenticated-user',
  `List available machine types for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    location: z.string().optional(),
    clientIp: z.string().optional(),
    ref: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codespaces/machines`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clientIp' in mappedParams) {
        mappedParams['client_ip'] = mappedParams['clientIp']
        delete mappedParams['clientIp']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/pre-flight-with-repo-for-authenticated-user',
  `Get default attributes for a codespace`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string().optional(),
    clientIp: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codespaces/new`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clientIp' in mappedParams) {
        mappedParams['client_ip'] = mappedParams['clientIp']
        delete mappedParams['clientIp']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/check-permissions-for-devcontainer',
  `Check if permissions defined by a devcontainer have been accepted by the authenticated user`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
    devcontainerPath: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codespaces/permissions_check`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('devcontainerPath' in mappedParams) {
        mappedParams['devcontainer_path'] = mappedParams['devcontainerPath']
        delete mappedParams['devcontainerPath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/list-repo-secrets',
  `List repository secrets`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codespaces/secrets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/get-repo-public-key',
  `Get a repository public key`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codespaces/secrets/public-key`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/get-repo-secret',
  `Get a repository secret`,
  {
    owner: z.string(),
    repo: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, secretName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codespaces/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/create-or-update-repo-secret',
  `Create or update a repository secret`,
  {
    owner: z.string(),
    repo: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, secretName, ...requestData } = args
      const url = `/repos/${owner}/${repo}/codespaces/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/delete-repo-secret',
  `Delete a repository secret`,
  {
    owner: z.string(),
    repo: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, secretName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/codespaces/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-collaborators',
  `List repository collaborators`,
  {
    owner: z.string(),
    repo: z.string(),
    affiliation: z.string().optional(),
    permission: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/collaborators`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/check-collaborator',
  `Check if a user is a repository collaborator`,
  {
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, username, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/collaborators/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/add-collaborator',
  `Add a repository collaborator`,
  {
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, username, ...requestData } = args
      const url = `/repos/${owner}/${repo}/collaborators/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/remove-collaborator',
  `Remove a repository collaborator`,
  {
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, username, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/collaborators/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-collaborator-permission-level',
  `Get repository permissions for a user`,
  {
    owner: z.string(),
    repo: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, username, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/collaborators/${username}/permission`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-commit-comments-for-repo',
  `List commit comments for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-commit-comment',
  `Get a commit comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-commit-comment',
  `Update a commit comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-commit-comment',
  `Delete a commit comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/list-for-commit-comment',
  `List reactions for a commit comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
    content: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/comments/${commentId}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/create-for-commit-comment',
  `Create reaction for a commit comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/comments/${commentId}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/delete-for-commit-comment',
  `Delete a commit comment reaction`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
    reactionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, reactionId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/comments/${commentId}/reactions/${reactionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }
      if ('reactionId' in mappedParams) {
        mappedParams['reaction_id'] = mappedParams['reactionId']
        delete mappedParams['reactionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-commits',
  `List commits`,
  {
    owner: z.string(),
    repo: z.string(),
    sha: z.string().optional(),
    path: z.string().optional(),
    author: z.string().optional(),
    committer: z.string().optional(),
    since: z.string().optional(),
    until: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-branches-for-head-commit',
  `List branches for HEAD commit`,
  {
    owner: z.string(),
    repo: z.string(),
    commitSha: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commitSha, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/commits/${commitSha}/branches-where-head`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commitSha' in mappedParams) {
        mappedParams['commit_sha'] = mappedParams['commitSha']
        delete mappedParams['commitSha']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-comments-for-commit',
  `List commit comments`,
  {
    owner: z.string(),
    repo: z.string(),
    commitSha: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commitSha, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/commits/${commitSha}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commitSha' in mappedParams) {
        mappedParams['commit_sha'] = mappedParams['commitSha']
        delete mappedParams['commitSha']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-commit-comment',
  `Create a commit comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commitSha: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commitSha, ...requestData } = args
      const url = `/repos/${owner}/${repo}/commits/${commitSha}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('commitSha' in mappedParams) {
        mappedParams['commit_sha'] = mappedParams['commitSha']
        delete mappedParams['commitSha']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-pull-requests-associated-with-commit',
  `List pull requests associated with a commit`,
  {
    owner: z.string(),
    repo: z.string(),
    commitSha: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commitSha, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/commits/${commitSha}/pulls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commitSha' in mappedParams) {
        mappedParams['commit_sha'] = mappedParams['commitSha']
        delete mappedParams['commitSha']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-commit',
  `Get a commit`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/commits/${ref}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/list-for-ref',
  `List check runs for a Git reference`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
    filter: z.string().optional(),
    appId: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/commits/${ref}/check-runs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('appId' in mappedParams) {
        mappedParams['app_id'] = mappedParams['appId']
        delete mappedParams['appId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'checks/list-suites-for-ref',
  `List check suites for a Git reference`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
    appId: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/commits/${ref}/check-suites`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('appId' in mappedParams) {
        mappedParams['app_id'] = mappedParams['appId']
        delete mappedParams['appId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-combined-status-for-ref',
  `Get the combined status for a specific reference`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/commits/${ref}/status`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-commit-statuses-for-ref',
  `List commit statuses for a reference`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/commits/${ref}/statuses`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-community-profile-metrics',
  `Get community profile metrics`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/community/profile`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/compare-commits',
  `Compare two commits`,
  {
    owner: z.string(),
    repo: z.string(),
    basehead: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, basehead, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/compare/${basehead}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-content',
  `Get repository content`,
  {
    owner: z.string(),
    repo: z.string(),
    path: z.string(),
    ref: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, path, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/contents/${path}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-or-update-file-contents',
  `Create or update file contents`,
  {
    owner: z.string(),
    repo: z.string(),
    path: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, path, ...requestData } = args
      const url = `/repos/${owner}/${repo}/contents/${path}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-file',
  `Delete a file`,
  {
    owner: z.string(),
    repo: z.string(),
    path: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, path, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/contents/${path}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-contributors',
  `List repository contributors`,
  {
    owner: z.string(),
    repo: z.string(),
    anon: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/contributors`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/list-alerts-for-repo',
  `List Dependabot alerts for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/dependabot/alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/get-alert',
  `Get a Dependabot alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/update-alert',
  `Update a Dependabot alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/list-repo-secrets',
  `List repository secrets`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/dependabot/secrets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/get-repo-public-key',
  `Get a repository public key`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/dependabot/secrets/public-key`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/get-repo-secret',
  `Get a repository secret`,
  {
    owner: z.string(),
    repo: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, secretName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/dependabot/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/create-or-update-repo-secret',
  `Create or update a repository secret`,
  {
    owner: z.string(),
    repo: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, secretName, ...requestData } = args
      const url = `/repos/${owner}/${repo}/dependabot/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependabot/delete-repo-secret',
  `Delete a repository secret`,
  {
    owner: z.string(),
    repo: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, secretName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/dependabot/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependency-graph/diff-range',
  `Get a diff of the dependencies between commits`,
  {
    owner: z.string(),
    repo: z.string(),
    basehead: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, basehead, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/dependency-graph/compare/${basehead}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependency-graph/export-sbom',
  `Export a software bill of materials (SBOM) for a repository.`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/dependency-graph/sbom`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'dependency-graph/create-repository-snapshot',
  `Create a snapshot of dependencies for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/dependency-graph/snapshots`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-deployments',
  `List deployments`,
  {
    owner: z.string(),
    repo: z.string(),
    sha: z.string().optional(),
    ref: z.string().optional(),
    task: z.string().optional(),
    environment: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/deployments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-deployment',
  `Create a deployment`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/deployments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-deployment',
  `Get a deployment`,
  {
    owner: z.string(),
    repo: z.string(),
    deploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, deploymentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/deployments/${deploymentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-deployment',
  `Delete a deployment`,
  {
    owner: z.string(),
    repo: z.string(),
    deploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, deploymentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/deployments/${deploymentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-deployment-statuses',
  `List deployment statuses`,
  {
    owner: z.string(),
    repo: z.string(),
    deploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, deploymentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/deployments/${deploymentId}/statuses`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-deployment-status',
  `Create a deployment status`,
  {
    owner: z.string(),
    repo: z.string(),
    deploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, deploymentId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/deployments/${deploymentId}/statuses`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-deployment-status',
  `Get a deployment status`,
  {
    owner: z.string(),
    repo: z.string(),
    deploymentId: z.string(),
    statusId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, deploymentId, statusId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/deployments/${deploymentId}/statuses/${statusId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }
      if ('statusId' in mappedParams) {
        mappedParams['status_id'] = mappedParams['statusId']
        delete mappedParams['statusId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-dispatch-event',
  `Create a repository dispatch event`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/dispatches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-all-environments',
  `List environments`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-environment',
  `Get an environment`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-or-update-environment',
  `Create or update an environment`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...requestData } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-an-environment',
  `Delete an environment`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-deployment-branch-policies',
  `List deployment branch policies`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-deployment-branch-policy',
  `Create a deployment branch policy`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...requestData } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-deployment-branch-policy',
  `Get a deployment branch policy`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    branchPolicyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, branchPolicyId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }
      if ('branchPolicyId' in mappedParams) {
        mappedParams['branch_policy_id'] = mappedParams['branchPolicyId']
        delete mappedParams['branchPolicyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-deployment-branch-policy',
  `Update a deployment branch policy`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    branchPolicyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, branchPolicyId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }
      if ('branchPolicyId' in mappedParams) {
        mappedParams['branch_policy_id'] = mappedParams['branchPolicyId']
        delete mappedParams['branchPolicyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-deployment-branch-policy',
  `Delete a deployment branch policy`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    branchPolicyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, branchPolicyId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }
      if ('branchPolicyId' in mappedParams) {
        mappedParams['branch_policy_id'] = mappedParams['branchPolicyId']
        delete mappedParams['branchPolicyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-all-deployment-protection-rules',
  `Get all deployment protection rules for an environment`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-deployment-protection-rule',
  `Create a custom deployment protection rule on an environment`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...requestData } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-custom-deployment-rule-integrations',
  `List custom deployment rule integrations available for an environment`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/apps`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-custom-deployment-protection-rule',
  `Get a custom deployment protection rule`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    protectionRuleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, protectionRuleId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }
      if ('protectionRuleId' in mappedParams) {
        mappedParams['protection_rule_id'] = mappedParams['protectionRuleId']
        delete mappedParams['protectionRuleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/disable-deployment-protection-rule',
  `Disable a custom protection rule for an environment`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    protectionRuleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, protectionRuleId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }
      if ('protectionRuleId' in mappedParams) {
        mappedParams['protection_rule_id'] = mappedParams['protectionRuleId']
        delete mappedParams['protectionRuleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-environment-secrets',
  `List environment secrets`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/secrets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-environment-public-key',
  `Get an environment public key`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/secrets/public-key`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-environment-secret',
  `Get an environment secret`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, secretName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-or-update-environment-secret',
  `Create or update an environment secret`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, secretName, ...requestData } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-environment-secret',
  `Delete an environment secret`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, secretName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/list-environment-variables',
  `List environment variables`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/create-environment-variable',
  `Create an environment variable`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, ...requestData } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/get-environment-variable',
  `Get an environment variable`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, name, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/update-environment-variable',
  `Update an environment variable`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, name, ...requestData } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'actions/delete-environment-variable',
  `Delete an environment variable`,
  {
    owner: z.string(),
    repo: z.string(),
    environmentName: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, environmentName, name, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentName' in mappedParams) {
        mappedParams['environment_name'] = mappedParams['environmentName']
        delete mappedParams['environmentName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-repo-events',
  `List repository events`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-forks',
  `List forks`,
  {
    owner: z.string(),
    repo: z.string(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/forks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-fork',
  `Create a fork`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/forks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/create-blob',
  `Create a blob`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/git/blobs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/get-blob',
  `Get a blob`,
  {
    owner: z.string(),
    repo: z.string(),
    fileSha: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, fileSha, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/git/blobs/${fileSha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileSha' in mappedParams) {
        mappedParams['file_sha'] = mappedParams['fileSha']
        delete mappedParams['fileSha']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/create-commit',
  `Create a commit`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/git/commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/get-commit',
  `Get a commit object`,
  {
    owner: z.string(),
    repo: z.string(),
    commitSha: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commitSha, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/git/commits/${commitSha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commitSha' in mappedParams) {
        mappedParams['commit_sha'] = mappedParams['commitSha']
        delete mappedParams['commitSha']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/list-matching-refs',
  `List matching references`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/git/matching-refs/${ref}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/get-ref',
  `Get a reference`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/git/ref/${ref}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/create-ref',
  `Create a reference`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/git/refs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/update-ref',
  `Update a reference`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...requestData } = args
      const url = `/repos/${owner}/${repo}/git/refs/${ref}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/delete-ref',
  `Delete a reference`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/git/refs/${ref}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/create-tag',
  `Create a tag object`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/git/tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/get-tag',
  `Get a tag`,
  {
    owner: z.string(),
    repo: z.string(),
    tagSha: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, tagSha, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/git/tags/${tagSha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagSha' in mappedParams) {
        mappedParams['tag_sha'] = mappedParams['tagSha']
        delete mappedParams['tagSha']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/create-tree',
  `Create a tree`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/git/trees`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'git/get-tree',
  `Get a tree`,
  {
    owner: z.string(),
    repo: z.string(),
    treeSha: z.string(),
    recursive: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, treeSha, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/git/trees/${treeSha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('treeSha' in mappedParams) {
        mappedParams['tree_sha'] = mappedParams['treeSha']
        delete mappedParams['treeSha']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-webhooks',
  `List repository webhooks`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/hooks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-webhook',
  `Create a repository webhook`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/hooks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-webhook',
  `Get a repository webhook`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-webhook',
  `Update a repository webhook`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-webhook',
  `Delete a repository webhook`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-webhook-config-for-repo',
  `Get a webhook configuration for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}/config`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-webhook-config-for-repo',
  `Update a webhook configuration for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}/config`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-webhook-deliveries',
  `List deliveries for a repository webhook`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}/deliveries`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-webhook-delivery',
  `Get a delivery for a repository webhook`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
    deliveryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, deliveryId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }
      if ('deliveryId' in mappedParams) {
        mappedParams['delivery_id'] = mappedParams['deliveryId']
        delete mappedParams['deliveryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/redeliver-webhook-delivery',
  `Redeliver a delivery for a repository webhook`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
    deliveryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, deliveryId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}/attempts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }
      if ('deliveryId' in mappedParams) {
        mappedParams['delivery_id'] = mappedParams['deliveryId']
        delete mappedParams['deliveryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/ping-webhook',
  `Ping a repository webhook`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}/pings`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/test-push-webhook',
  `Test the push repository webhook`,
  {
    owner: z.string(),
    repo: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, hookId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/hooks/${hookId}/tests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/get-import-status',
  `Get an import status`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/import`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/start-import',
  `Start an import`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/import`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/update-import',
  `Update an import`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/import`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/cancel-import',
  `Cancel an import`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/import`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/get-commit-authors',
  `Get commit authors`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/import/authors`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/map-commit-author',
  `Map a commit author`,
  {
    owner: z.string(),
    repo: z.string(),
    authorId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, authorId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/import/authors/${authorId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('authorId' in mappedParams) {
        mappedParams['author_id'] = mappedParams['authorId']
        delete mappedParams['authorId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/get-large-files',
  `Get large files`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/import/large_files`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/set-lfs-preference',
  `Update Git LFS preference`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/import/lfs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/get-repo-installation',
  `Get a repository installation for the authenticated app`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/installation`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'interactions/get-restrictions-for-repo',
  `Get interaction restrictions for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/interaction-limits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'interactions/set-restrictions-for-repo',
  `Set interaction restrictions for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/interaction-limits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'interactions/remove-restrictions-for-repo',
  `Remove interaction restrictions for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/interaction-limits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-invitations',
  `List repository invitations`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-invitation',
  `Update a repository invitation`,
  {
    owner: z.string(),
    repo: z.string(),
    invitationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, invitationId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/invitations/${invitationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('invitationId' in mappedParams) {
        mappedParams['invitation_id'] = mappedParams['invitationId']
        delete mappedParams['invitationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-invitation',
  `Delete a repository invitation`,
  {
    owner: z.string(),
    repo: z.string(),
    invitationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, invitationId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/invitations/${invitationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('invitationId' in mappedParams) {
        mappedParams['invitation_id'] = mappedParams['invitationId']
        delete mappedParams['invitationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-for-repo',
  `List repository issues`,
  {
    owner: z.string(),
    repo: z.string(),
    milestone: z.string().optional(),
    state: z.string().optional(),
    assignee: z.string().optional(),
    type: z.string().optional(),
    creator: z.string().optional(),
    mentioned: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/create',
  `Create an issue`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-comments-for-repo',
  `List issue comments for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/get-comment',
  `Get an issue comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/update-comment',
  `Update an issue comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/delete-comment',
  `Delete an issue comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/list-for-issue-comment',
  `List reactions for an issue comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
    content: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/comments/${commentId}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/create-for-issue-comment',
  `Create reaction for an issue comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/comments/${commentId}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/delete-for-issue-comment',
  `Delete an issue comment reaction`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
    reactionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, reactionId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/comments/${commentId}/reactions/${reactionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }
      if ('reactionId' in mappedParams) {
        mappedParams['reaction_id'] = mappedParams['reactionId']
        delete mappedParams['reactionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-events-for-repo',
  `List issue events for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/get-event',
  `Get an issue event`,
  {
    owner: z.string(),
    repo: z.string(),
    eventId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, eventId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/events/${eventId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('eventId' in mappedParams) {
        mappedParams['event_id'] = mappedParams['eventId']
        delete mappedParams['eventId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/get',
  `Get an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/update',
  `Update an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/add-assignees',
  `Add assignees to an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/assignees`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/remove-assignees',
  `Remove assignees from an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/assignees`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/check-user-can-be-assigned-to-issue',
  `Check if a user can be assigned to a issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
    assignee: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, assignee, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/assignees/${assignee}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-comments',
  `List issue comments`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/create-comment',
  `Create an issue comment`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-events',
  `List issue events`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-labels-on-issue',
  `List labels for an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/add-labels',
  `Add labels to an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/set-labels',
  `Set labels for an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/remove-all-labels',
  `Remove all labels from an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/remove-label',
  `Remove a label from an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, name, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/labels/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/lock',
  `Lock an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/lock`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/unlock',
  `Unlock an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/lock`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/list-for-issue',
  `List reactions for an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
    content: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/create-for-issue',
  `Create reaction for an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/delete-for-issue',
  `Delete an issue reaction`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
    reactionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, reactionId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/reactions/${reactionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }
      if ('reactionId' in mappedParams) {
        mappedParams['reaction_id'] = mappedParams['reactionId']
        delete mappedParams['reactionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/remove-sub-issue',
  `Remove sub-issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/sub_issue`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-sub-issues',
  `List sub-issues`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/add-sub-issue',
  `Add sub-issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/reprioritize-sub-issue',
  `Reprioritize sub-issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues/priority`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-events-for-timeline',
  `List timeline events for an issue`,
  {
    owner: z.string(),
    repo: z.string(),
    issueNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, issueNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/issues/${issueNumber}/timeline`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueNumber' in mappedParams) {
        mappedParams['issue_number'] = mappedParams['issueNumber']
        delete mappedParams['issueNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-deploy-keys',
  `List deploy keys`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/keys`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-deploy-key',
  `Create a deploy key`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/keys`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-deploy-key',
  `Get a deploy key`,
  {
    owner: z.string(),
    repo: z.string(),
    keyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, keyId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/keys/${keyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('keyId' in mappedParams) {
        mappedParams['key_id'] = mappedParams['keyId']
        delete mappedParams['keyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-deploy-key',
  `Delete a deploy key`,
  {
    owner: z.string(),
    repo: z.string(),
    keyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, keyId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/keys/${keyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('keyId' in mappedParams) {
        mappedParams['key_id'] = mappedParams['keyId']
        delete mappedParams['keyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-labels-for-repo',
  `List labels for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/create-label',
  `Create a label`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/get-label',
  `Get a label`,
  {
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, name, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/labels/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/update-label',
  `Update a label`,
  {
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, name, ...requestData } = args
      const url = `/repos/${owner}/${repo}/labels/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/delete-label',
  `Delete a label`,
  {
    owner: z.string(),
    repo: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, name, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/labels/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-languages',
  `List repository languages`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/languages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'licenses/get-for-repo',
  `Get the license for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/license`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/merge-upstream',
  `Sync a fork branch with the upstream repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/merge-upstream`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/merge',
  `Merge a branch`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/merges`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-milestones',
  `List milestones`,
  {
    owner: z.string(),
    repo: z.string(),
    state: z.string().optional(),
    sort: z.string().optional(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/milestones`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/create-milestone',
  `Create a milestone`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/milestones`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/get-milestone',
  `Get a milestone`,
  {
    owner: z.string(),
    repo: z.string(),
    milestoneNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, milestoneNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/milestones/${milestoneNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('milestoneNumber' in mappedParams) {
        mappedParams['milestone_number'] = mappedParams['milestoneNumber']
        delete mappedParams['milestoneNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/update-milestone',
  `Update a milestone`,
  {
    owner: z.string(),
    repo: z.string(),
    milestoneNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, milestoneNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/milestones/${milestoneNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('milestoneNumber' in mappedParams) {
        mappedParams['milestone_number'] = mappedParams['milestoneNumber']
        delete mappedParams['milestoneNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/delete-milestone',
  `Delete a milestone`,
  {
    owner: z.string(),
    repo: z.string(),
    milestoneNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, milestoneNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/milestones/${milestoneNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('milestoneNumber' in mappedParams) {
        mappedParams['milestone_number'] = mappedParams['milestoneNumber']
        delete mappedParams['milestoneNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-labels-for-milestone',
  `List labels for issues in a milestone`,
  {
    owner: z.string(),
    repo: z.string(),
    milestoneNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, milestoneNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/milestones/${milestoneNumber}/labels`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('milestoneNumber' in mappedParams) {
        mappedParams['milestone_number'] = mappedParams['milestoneNumber']
        delete mappedParams['milestoneNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-repo-notifications-for-authenticated-user',
  `List repository notifications for the authenticated user`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/notifications`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/mark-repo-notifications-as-read',
  `Mark repository notifications as read`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/notifications`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-pages',
  `Get a GitHub Pages site`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-pages-site',
  `Create a GitHub Pages site`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-information-about-pages-site',
  `Update information about a GitHub Pages site`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-pages-site',
  `Delete a GitHub Pages site`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-pages-builds',
  `List GitHub Pages builds`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pages/builds`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/request-pages-build',
  `Request a GitHub Pages build`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pages/builds`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-latest-pages-build',
  `Get latest Pages build`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pages/builds/latest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-pages-build',
  `Get GitHub Pages build`,
  {
    owner: z.string(),
    repo: z.string(),
    buildId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, buildId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pages/builds/${buildId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('buildId' in mappedParams) {
        mappedParams['build_id'] = mappedParams['buildId']
        delete mappedParams['buildId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-pages-deployment',
  `Create a GitHub Pages deployment`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pages/deployments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-pages-deployment',
  `Get the status of a GitHub Pages deployment`,
  {
    owner: z.string(),
    repo: z.string(),
    pagesDeploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pagesDeploymentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pagesDeploymentId' in mappedParams) {
        mappedParams['pages_deployment_id'] = mappedParams['pagesDeploymentId']
        delete mappedParams['pagesDeploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/cancel-pages-deployment',
  `Cancel a GitHub Pages deployment`,
  {
    owner: z.string(),
    repo: z.string(),
    pagesDeploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pagesDeploymentId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}/cancel`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pagesDeploymentId' in mappedParams) {
        mappedParams['pages_deployment_id'] = mappedParams['pagesDeploymentId']
        delete mappedParams['pagesDeploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-pages-health-check',
  `Get a DNS health check for GitHub Pages`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pages/health`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/check-private-vulnerability-reporting',
  `Check if private vulnerability reporting is enabled for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/private-vulnerability-reporting`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/enable-private-vulnerability-reporting',
  `Enable private vulnerability reporting for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/private-vulnerability-reporting`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/disable-private-vulnerability-reporting',
  `Disable private vulnerability reporting for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/private-vulnerability-reporting`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/list-for-repo',
  `List repository projects`,
  {
    owner: z.string(),
    repo: z.string(),
    state: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/create-for-repo',
  `Create a repository project`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-custom-properties-values',
  `Get all custom property values for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/properties/values`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-or-update-custom-properties-values',
  `Create or update custom property values for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/properties/values`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/list',
  `List pull requests`,
  {
    owner: z.string(),
    repo: z.string(),
    state: z.string().optional(),
    head: z.string().optional(),
    base: z.string().optional(),
    sort: z.string().optional(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/create',
  `Create a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/list-review-comments-for-repo',
  `List review comments in a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    sort: z.string().optional(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/get-review-comment',
  `Get a review comment for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/update-review-comment',
  `Update a review comment for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/delete-review-comment',
  `Delete a review comment for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/comments/${commentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/list-for-pull-request-review-comment',
  `List reactions for a pull request review comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
    content: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/create-for-pull-request-review-comment',
  `Create reaction for a pull request review comment`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/delete-for-pull-request-comment',
  `Delete a pull request comment reaction`,
  {
    owner: z.string(),
    repo: z.string(),
    commentId: z.string(),
    reactionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, commentId, reactionId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions/${reactionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }
      if ('reactionId' in mappedParams) {
        mappedParams['reaction_id'] = mappedParams['reactionId']
        delete mappedParams['reactionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/get',
  `Get a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/update',
  `Update a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/create-with-pr-for-authenticated-user',
  `Create a codespace from a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/codespaces`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/list-review-comments',
  `List review comments on a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/create-review-comment',
  `Create a review comment for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/create-reply-for-review-comment',
  `Create a reply for a review comment`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
    commentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, commentId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/comments/${commentId}/replies`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }
      if ('commentId' in mappedParams) {
        mappedParams['comment_id'] = mappedParams['commentId']
        delete mappedParams['commentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/list-commits',
  `List commits on a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/list-files',
  `List pull requests files`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/files`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/check-if-merged',
  `Check if a pull request has been merged`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/merge`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/merge',
  `Merge a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/merge`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/list-requested-reviewers',
  `Get all requested reviewers for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/request-reviewers',
  `Request reviewers for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/remove-requested-reviewers',
  `Remove requested reviewers from a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/list-reviews',
  `List reviews for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/create-review',
  `Create a review for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/get-review',
  `Get a review for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
    reviewId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, reviewId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }
      if ('reviewId' in mappedParams) {
        mappedParams['review_id'] = mappedParams['reviewId']
        delete mappedParams['reviewId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/update-review',
  `Update a review for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
    reviewId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, reviewId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }
      if ('reviewId' in mappedParams) {
        mappedParams['review_id'] = mappedParams['reviewId']
        delete mappedParams['reviewId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/delete-pending-review',
  `Delete a pending review for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
    reviewId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, reviewId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }
      if ('reviewId' in mappedParams) {
        mappedParams['review_id'] = mappedParams['reviewId']
        delete mappedParams['reviewId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/list-comments-for-review',
  `List comments for a pull request review`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
    reviewId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, reviewId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }
      if ('reviewId' in mappedParams) {
        mappedParams['review_id'] = mappedParams['reviewId']
        delete mappedParams['reviewId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/dismiss-review',
  `Dismiss a review for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
    reviewId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, reviewId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/dismissals`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }
      if ('reviewId' in mappedParams) {
        mappedParams['review_id'] = mappedParams['reviewId']
        delete mappedParams['reviewId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/submit-review',
  `Submit a review for a pull request`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
    reviewId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, reviewId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }
      if ('reviewId' in mappedParams) {
        mappedParams['review_id'] = mappedParams['reviewId']
        delete mappedParams['reviewId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'pulls/update-branch',
  `Update a pull request branch`,
  {
    owner: z.string(),
    repo: z.string(),
    pullNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, pullNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/pulls/${pullNumber}/update-branch`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pullNumber' in mappedParams) {
        mappedParams['pull_number'] = mappedParams['pullNumber']
        delete mappedParams['pullNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-readme',
  `Get a repository README`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/readme`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-readme-in-directory',
  `Get a repository README for a directory`,
  {
    owner: z.string(),
    repo: z.string(),
    dir: z.string(),
    ref: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, dir, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/readme/${dir}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-releases',
  `List releases`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-release',
  `Create a release`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/releases`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-release-asset',
  `Get a release asset`,
  {
    owner: z.string(),
    repo: z.string(),
    assetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, assetId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases/assets/${assetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('assetId' in mappedParams) {
        mappedParams['asset_id'] = mappedParams['assetId']
        delete mappedParams['assetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-release-asset',
  `Update a release asset`,
  {
    owner: z.string(),
    repo: z.string(),
    assetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, assetId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/releases/assets/${assetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('assetId' in mappedParams) {
        mappedParams['asset_id'] = mappedParams['assetId']
        delete mappedParams['assetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-release-asset',
  `Delete a release asset`,
  {
    owner: z.string(),
    repo: z.string(),
    assetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, assetId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases/assets/${assetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('assetId' in mappedParams) {
        mappedParams['asset_id'] = mappedParams['assetId']
        delete mappedParams['assetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/generate-release-notes',
  `Generate release notes content for a release`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/releases/generate-notes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-latest-release',
  `Get the latest release`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases/latest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-release-by-tag',
  `Get a release by tag name`,
  {
    owner: z.string(),
    repo: z.string(),
    tag: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, tag, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases/tags/${tag}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-release',
  `Get a release`,
  {
    owner: z.string(),
    repo: z.string(),
    releaseId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, releaseId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases/${releaseId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('releaseId' in mappedParams) {
        mappedParams['release_id'] = mappedParams['releaseId']
        delete mappedParams['releaseId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-release',
  `Update a release`,
  {
    owner: z.string(),
    repo: z.string(),
    releaseId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, releaseId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/releases/${releaseId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('releaseId' in mappedParams) {
        mappedParams['release_id'] = mappedParams['releaseId']
        delete mappedParams['releaseId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-release',
  `Delete a release`,
  {
    owner: z.string(),
    repo: z.string(),
    releaseId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, releaseId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases/${releaseId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('releaseId' in mappedParams) {
        mappedParams['release_id'] = mappedParams['releaseId']
        delete mappedParams['releaseId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-release-assets',
  `List release assets`,
  {
    owner: z.string(),
    repo: z.string(),
    releaseId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, releaseId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases/${releaseId}/assets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('releaseId' in mappedParams) {
        mappedParams['release_id'] = mappedParams['releaseId']
        delete mappedParams['releaseId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/upload-release-asset',
  `Upload a release asset`,
  {
    owner: z.string(),
    repo: z.string(),
    releaseId: z.string(),
    name: z.string(),
    label: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, releaseId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/releases/${releaseId}/assets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('releaseId' in mappedParams) {
        mappedParams['release_id'] = mappedParams['releaseId']
        delete mappedParams['releaseId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/list-for-release',
  `List reactions for a release`,
  {
    owner: z.string(),
    repo: z.string(),
    releaseId: z.string(),
    content: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, releaseId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases/${releaseId}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('releaseId' in mappedParams) {
        mappedParams['release_id'] = mappedParams['releaseId']
        delete mappedParams['releaseId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/create-for-release',
  `Create reaction for a release`,
  {
    owner: z.string(),
    repo: z.string(),
    releaseId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, releaseId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/releases/${releaseId}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('releaseId' in mappedParams) {
        mappedParams['release_id'] = mappedParams['releaseId']
        delete mappedParams['releaseId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/delete-for-release',
  `Delete a release reaction`,
  {
    owner: z.string(),
    repo: z.string(),
    releaseId: z.string(),
    reactionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, releaseId, reactionId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/releases/${releaseId}/reactions/${reactionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('releaseId' in mappedParams) {
        mappedParams['release_id'] = mappedParams['releaseId']
        delete mappedParams['releaseId']
      }
      if ('reactionId' in mappedParams) {
        mappedParams['reaction_id'] = mappedParams['reactionId']
        delete mappedParams['reactionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-branch-rules',
  `Get rules for a branch`,
  {
    owner: z.string(),
    repo: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, branch, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/rules/branches/${branch}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-repo-rulesets',
  `Get all repository rulesets`,
  {
    owner: z.string(),
    repo: z.string(),
    includesParents: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/rulesets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('includesParents' in mappedParams) {
        mappedParams['includes_parents'] = mappedParams['includesParents']
        delete mappedParams['includesParents']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-repo-ruleset',
  `Create a repository ruleset`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/rulesets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-repo-rule-suites',
  `List repository rule suites`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/rulesets/rule-suites`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-repo-rule-suite',
  `Get a repository rule suite`,
  {
    owner: z.string(),
    repo: z.string(),
    ruleSuiteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ruleSuiteId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/rulesets/rule-suites/${ruleSuiteId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('ruleSuiteId' in mappedParams) {
        mappedParams['rule_suite_id'] = mappedParams['ruleSuiteId']
        delete mappedParams['ruleSuiteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-repo-ruleset',
  `Get a repository ruleset`,
  {
    owner: z.string(),
    repo: z.string(),
    rulesetId: z.string(),
    includesParents: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, rulesetId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/rulesets/${rulesetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }
      if ('includesParents' in mappedParams) {
        mappedParams['includes_parents'] = mappedParams['includesParents']
        delete mappedParams['includesParents']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/update-repo-ruleset',
  `Update a repository ruleset`,
  {
    owner: z.string(),
    repo: z.string(),
    rulesetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, rulesetId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/rulesets/${rulesetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-repo-ruleset',
  `Delete a repository ruleset`,
  {
    owner: z.string(),
    repo: z.string(),
    rulesetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, rulesetId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/rulesets/${rulesetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-repo-ruleset-history',
  `Get repository ruleset history`,
  {
    owner: z.string(),
    repo: z.string(),
    rulesetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, rulesetId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/rulesets/${rulesetId}/history`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-repo-ruleset-version',
  `Get repository ruleset version`,
  {
    owner: z.string(),
    repo: z.string(),
    rulesetId: z.string(),
    versionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, rulesetId, versionId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/rulesets/${rulesetId}/history/${versionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('rulesetId' in mappedParams) {
        mappedParams['ruleset_id'] = mappedParams['rulesetId']
        delete mappedParams['rulesetId']
      }
      if ('versionId' in mappedParams) {
        mappedParams['version_id'] = mappedParams['versionId']
        delete mappedParams['versionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'secret-scanning/list-alerts-for-repo',
  `List secret scanning alerts for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/secret-scanning/alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'secret-scanning/get-alert',
  `Get a secret scanning alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'secret-scanning/update-alert',
  `Update a secret scanning alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...requestData } = args
      const url = `/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'secret-scanning/list-locations-for-alert',
  `List locations for a secret scanning alert`,
  {
    owner: z.string(),
    repo: z.string(),
    alertNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, alertNumber, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}/locations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('alertNumber' in mappedParams) {
        mappedParams['alert_number'] = mappedParams['alertNumber']
        delete mappedParams['alertNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'secret-scanning/create-push-protection-bypass',
  `Create a push protection bypass`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/secret-scanning/push-protection-bypasses`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'secret-scanning/get-scan-history',
  `Get secret scanning scan history for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/secret-scanning/scan-history`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'security-advisories/list-repository-advisories',
  `List repository security advisories`,
  {
    owner: z.string(),
    repo: z.string(),
    sort: z.string().optional(),
    perPage: z.string().optional(),
    state: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/security-advisories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'security-advisories/create-repository-advisory',
  `Create a repository security advisory`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/security-advisories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'security-advisories/create-private-vulnerability-report',
  `Privately report a security vulnerability`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/security-advisories/reports`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'security-advisories/get-repository-advisory',
  `Get a repository security advisory`,
  {
    owner: z.string(),
    repo: z.string(),
    ghsaId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ghsaId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/security-advisories/${ghsaId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('ghsaId' in mappedParams) {
        mappedParams['ghsa_id'] = mappedParams['ghsaId']
        delete mappedParams['ghsaId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'security-advisories/update-repository-advisory',
  `Update a repository security advisory`,
  {
    owner: z.string(),
    repo: z.string(),
    ghsaId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ghsaId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/security-advisories/${ghsaId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('ghsaId' in mappedParams) {
        mappedParams['ghsa_id'] = mappedParams['ghsaId']
        delete mappedParams['ghsaId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'security-advisories/create-repository-advisory-cve-request',
  `Request a CVE for a repository security advisory`,
  {
    owner: z.string(),
    repo: z.string(),
    ghsaId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ghsaId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/security-advisories/${ghsaId}/cve`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('ghsaId' in mappedParams) {
        mappedParams['ghsa_id'] = mappedParams['ghsaId']
        delete mappedParams['ghsaId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'security-advisories/create-fork',
  `Create a temporary private fork`,
  {
    owner: z.string(),
    repo: z.string(),
    ghsaId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ghsaId, ...requestData } = args
      const url = `/repos/${owner}/${repo}/security-advisories/${ghsaId}/forks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('ghsaId' in mappedParams) {
        mappedParams['ghsa_id'] = mappedParams['ghsaId']
        delete mappedParams['ghsaId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-stargazers-for-repo',
  `List stargazers`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/stargazers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-code-frequency-stats',
  `Get the weekly commit activity`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/stats/code_frequency`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-commit-activity-stats',
  `Get the last year of commit activity`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/stats/commit_activity`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-contributors-stats',
  `Get all contributor commit activity`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/stats/contributors`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-participation-stats',
  `Get the weekly commit count`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/stats/participation`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-punch-card-stats',
  `Get the hourly commit count for each day`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/stats/punch_card`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-commit-status',
  `Create a commit status`,
  {
    owner: z.string(),
    repo: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, sha, ...requestData } = args
      const url = `/repos/${owner}/${repo}/statuses/${sha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-watchers-for-repo',
  `List watchers`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/subscribers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/get-repo-subscription',
  `Get a repository subscription`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/subscription`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/set-repo-subscription',
  `Set a repository subscription`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/subscription`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/delete-repo-subscription',
  `Delete a repository subscription`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/subscription`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-tags',
  `List repository tags`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-tag-protection',
  `Closing down - List tag protection states for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/tags/protection`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-tag-protection',
  `Closing down - Create a tag protection state for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/tags/protection`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/delete-tag-protection',
  `Closing down - Delete a tag protection state for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
    tagProtectionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, tagProtectionId, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/tags/protection/${tagProtectionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagProtectionId' in mappedParams) {
        mappedParams['tag_protection_id'] = mappedParams['tagProtectionId']
        delete mappedParams['tagProtectionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/download-tarball-archive',
  `Download a repository archive (tar)`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/tarball/${ref}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-teams',
  `List repository teams`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-all-topics',
  `Get all repository topics`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/topics`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/replace-all-topics',
  `Replace all repository topics`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/topics`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-clones',
  `Get repository clones`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/traffic/clones`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-top-paths',
  `Get top referral paths`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/traffic/popular/paths`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-top-referrers',
  `Get top referral sources`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/traffic/popular/referrers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/get-views',
  `Get page views`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/traffic/views`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/transfer',
  `Transfer a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/transfer`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/check-vulnerability-alerts',
  `Check if vulnerability alerts are enabled for a repository`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/vulnerability-alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/enable-vulnerability-alerts',
  `Enable vulnerability alerts`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/repos/${owner}/${repo}/vulnerability-alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/disable-vulnerability-alerts',
  `Disable vulnerability alerts`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/vulnerability-alerts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/download-zipball-archive',
  `Download a repository archive (zip)`,
  {
    owner: z.string(),
    repo: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ref, ...queryParams } = args
      const url = `/repos/${owner}/${repo}/zipball/${ref}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-using-template',
  `Create a repository using a template`,
  {
    templateOwner: z.string(),
    templateRepo: z.string(),
  },
  async (args, extra) => {
    try {
      const { templateOwner, templateRepo, ...requestData } = args
      const url = `/repos/${templateOwner}/${templateRepo}/generate`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('templateOwner' in mappedParams) {
        mappedParams['template_owner'] = mappedParams['templateOwner']
        delete mappedParams['templateOwner']
      }
      if ('templateRepo' in mappedParams) {
        mappedParams['template_repo'] = mappedParams['templateRepo']
        delete mappedParams['templateRepo']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('repos/list-public', `List public repositories`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/repositories',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'search/code',
  `Search code`,
  {
    q: z.string(),
    sort: z.string().optional(),
    order: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/search/code',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'search/commits',
  `Search commits`,
  {
    q: z.string(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/search/commits',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'search/issues-and-pull-requests',
  `Search issues and pull requests`,
  {
    q: z.string(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/search/issues',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'search/labels',
  `Search labels`,
  {
    repositoryId: z.string(),
    q: z.string(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/search/labels',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'search/repos',
  `Search repositories`,
  {
    q: z.string(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/search/repositories',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'search/topics',
  `Search topics`,
  {
    q: z.string(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/search/topics',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'search/users',
  `Search users`,
  {
    q: z.string(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/search/users',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/get-legacy',
  `Get a team (Legacy)`,
  {
    teamId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...queryParams } = args
      const url = `/teams/${teamId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/update-legacy',
  `Update a team (Legacy)`,
  {
    teamId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...requestData } = args
      const url = `/teams/${teamId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/delete-legacy',
  `Delete a team (Legacy)`,
  {
    teamId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...queryParams } = args
      const url = `/teams/${teamId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-discussions-legacy',
  `List discussions (Legacy)`,
  {
    teamId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...queryParams } = args
      const url = `/teams/${teamId}/discussions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/create-discussion-legacy',
  `Create a discussion (Legacy)`,
  {
    teamId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...requestData } = args
      const url = `/teams/${teamId}/discussions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/get-discussion-legacy',
  `Get a discussion (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, ...queryParams } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/update-discussion-legacy',
  `Update a discussion (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, ...requestData } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/delete-discussion-legacy',
  `Delete a discussion (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, ...queryParams } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-discussion-comments-legacy',
  `List discussion comments (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, ...queryParams } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/create-discussion-comment-legacy',
  `Create a discussion comment (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, ...requestData } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/get-discussion-comment-legacy',
  `Get a discussion comment (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, commentNumber, ...queryParams } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/update-discussion-comment-legacy',
  `Update a discussion comment (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, commentNumber, ...requestData } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/delete-discussion-comment-legacy',
  `Delete a discussion comment (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, commentNumber, ...queryParams } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/list-for-team-discussion-comment-legacy',
  `List reactions for a team discussion comment (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
    content: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, commentNumber, ...queryParams } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/create-for-team-discussion-comment-legacy',
  `Create reaction for a team discussion comment (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
    commentNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, commentNumber, ...requestData } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }
      if ('commentNumber' in mappedParams) {
        mappedParams['comment_number'] = mappedParams['commentNumber']
        delete mappedParams['commentNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/list-for-team-discussion-legacy',
  `List reactions for a team discussion (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
    content: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, ...queryParams } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'reactions/create-for-team-discussion-legacy',
  `Create reaction for a team discussion (Legacy)`,
  {
    teamId: z.string(),
    discussionNumber: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, discussionNumber, ...requestData } = args
      const url = `/teams/${teamId}/discussions/${discussionNumber}/reactions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('discussionNumber' in mappedParams) {
        mappedParams['discussion_number'] = mappedParams['discussionNumber']
        delete mappedParams['discussionNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-pending-invitations-legacy',
  `List pending team invitations (Legacy)`,
  {
    teamId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...queryParams } = args
      const url = `/teams/${teamId}/invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-members-legacy',
  `List team members (Legacy)`,
  {
    teamId: z.string(),
    role: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...queryParams } = args
      const url = `/teams/${teamId}/members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/get-member-legacy',
  `Get team member (Legacy)`,
  {
    teamId: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, username, ...queryParams } = args
      const url = `/teams/${teamId}/members/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/add-member-legacy',
  `Add team member (Legacy)`,
  {
    teamId: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, username, ...requestData } = args
      const url = `/teams/${teamId}/members/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/remove-member-legacy',
  `Remove team member (Legacy)`,
  {
    teamId: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, username, ...queryParams } = args
      const url = `/teams/${teamId}/members/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/get-membership-for-user-legacy',
  `Get team membership for a user (Legacy)`,
  {
    teamId: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, username, ...queryParams } = args
      const url = `/teams/${teamId}/memberships/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/add-or-update-membership-for-user-legacy',
  `Add or update team membership for a user (Legacy)`,
  {
    teamId: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, username, ...requestData } = args
      const url = `/teams/${teamId}/memberships/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/remove-membership-for-user-legacy',
  `Remove team membership for a user (Legacy)`,
  {
    teamId: z.string(),
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, username, ...queryParams } = args
      const url = `/teams/${teamId}/memberships/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-projects-legacy',
  `List team projects (Legacy)`,
  {
    teamId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...queryParams } = args
      const url = `/teams/${teamId}/projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/check-permissions-for-project-legacy',
  `Check team permissions for a project (Legacy)`,
  {
    teamId: z.string(),
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, projectId, ...queryParams } = args
      const url = `/teams/${teamId}/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/add-or-update-project-permissions-legacy',
  `Add or update team project permissions (Legacy)`,
  {
    teamId: z.string(),
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, projectId, ...requestData } = args
      const url = `/teams/${teamId}/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/remove-project-legacy',
  `Remove a project from a team (Legacy)`,
  {
    teamId: z.string(),
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, projectId, ...queryParams } = args
      const url = `/teams/${teamId}/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-repos-legacy',
  `List team repositories (Legacy)`,
  {
    teamId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...queryParams } = args
      const url = `/teams/${teamId}/repos`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/check-permissions-for-repo-legacy',
  `Check team permissions for a repository (Legacy)`,
  {
    teamId: z.string(),
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, owner, repo, ...queryParams } = args
      const url = `/teams/${teamId}/repos/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/add-or-update-repo-permissions-legacy',
  `Add or update team repository permissions (Legacy)`,
  {
    teamId: z.string(),
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, owner, repo, ...requestData } = args
      const url = `/teams/${teamId}/repos/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/remove-repo-legacy',
  `Remove a repository from a team (Legacy)`,
  {
    teamId: z.string(),
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, owner, repo, ...queryParams } = args
      const url = `/teams/${teamId}/repos/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-child-legacy',
  `List child teams (Legacy)`,
  {
    teamId: z.string(),
  },
  async (args, extra) => {
    try {
      const { teamId, ...queryParams } = args
      const url = `/teams/${teamId}/teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('teamId' in mappedParams) {
        mappedParams['team_id'] = mappedParams['teamId']
        delete mappedParams['teamId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('users/get-authenticated', `Get the authenticated user`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/user',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('users/update-authenticated', `Update the authenticated user`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'PATCH',
      url: '/user',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'users/list-blocked-by-authenticated-user',
  `List users blocked by the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/blocks',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/check-blocked',
  `Check if a user is blocked by the authenticated user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/user/blocks/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/block',
  `Block a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...requestData } = args
      const url = `/user/blocks/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/unblock',
  `Unblock a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/user/blocks/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/list-for-authenticated-user',
  `List codespaces for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/codespaces',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/create-for-authenticated-user',
  `Create a codespace for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/user/codespaces',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/list-secrets-for-authenticated-user',
  `List secrets for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/codespaces/secrets',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/get-public-key-for-authenticated-user',
  `Get public key for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/codespaces/secrets/public-key',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/get-secret-for-authenticated-user',
  `Get a secret for the authenticated user`,
  {
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { secretName, ...queryParams } = args
      const url = `/user/codespaces/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/create-or-update-secret-for-authenticated-user',
  `Create or update a secret for the authenticated user`,
  {
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { secretName, ...requestData } = args
      const url = `/user/codespaces/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/delete-secret-for-authenticated-user',
  `Delete a secret for the authenticated user`,
  {
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { secretName, ...queryParams } = args
      const url = `/user/codespaces/secrets/${secretName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/list-repositories-for-secret-for-authenticated-user',
  `List selected repositories for a user secret`,
  {
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { secretName, ...queryParams } = args
      const url = `/user/codespaces/secrets/${secretName}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/set-repositories-for-secret-for-authenticated-user',
  `Set selected repositories for a user secret`,
  {
    secretName: z.string(),
  },
  async (args, extra) => {
    try {
      const { secretName, ...requestData } = args
      const url = `/user/codespaces/secrets/${secretName}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/add-repository-for-secret-for-authenticated-user',
  `Add a selected repository to a user secret`,
  {
    secretName: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { secretName, repositoryId, ...requestData } = args
      const url = `/user/codespaces/secrets/${secretName}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/remove-repository-for-secret-for-authenticated-user',
  `Remove a selected repository from a user secret`,
  {
    secretName: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { secretName, repositoryId, ...queryParams } = args
      const url = `/user/codespaces/secrets/${secretName}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secretName' in mappedParams) {
        mappedParams['secret_name'] = mappedParams['secretName']
        delete mappedParams['secretName']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/get-for-authenticated-user',
  `Get a codespace for the authenticated user`,
  {
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { codespaceName, ...queryParams } = args
      const url = `/user/codespaces/${codespaceName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/update-for-authenticated-user',
  `Update a codespace for the authenticated user`,
  {
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { codespaceName, ...requestData } = args
      const url = `/user/codespaces/${codespaceName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/delete-for-authenticated-user',
  `Delete a codespace for the authenticated user`,
  {
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { codespaceName, ...queryParams } = args
      const url = `/user/codespaces/${codespaceName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/export-for-authenticated-user',
  `Export a codespace for the authenticated user`,
  {
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { codespaceName, ...requestData } = args
      const url = `/user/codespaces/${codespaceName}/exports`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/get-export-details-for-authenticated-user',
  `Get details about a codespace export`,
  {
    codespaceName: z.string(),
    exportId: z.string(),
  },
  async (args, extra) => {
    try {
      const { codespaceName, exportId, ...queryParams } = args
      const url = `/user/codespaces/${codespaceName}/exports/${exportId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }
      if ('exportId' in mappedParams) {
        mappedParams['export_id'] = mappedParams['exportId']
        delete mappedParams['exportId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/codespace-machines-for-authenticated-user',
  `List machine types for a codespace`,
  {
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { codespaceName, ...queryParams } = args
      const url = `/user/codespaces/${codespaceName}/machines`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/publish-for-authenticated-user',
  `Create a repository from an unpublished codespace`,
  {
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { codespaceName, ...requestData } = args
      const url = `/user/codespaces/${codespaceName}/publish`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/start-for-authenticated-user',
  `Start a codespace for the authenticated user`,
  {
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { codespaceName, ...requestData } = args
      const url = `/user/codespaces/${codespaceName}/start`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'codespaces/stop-for-authenticated-user',
  `Stop a codespace for the authenticated user`,
  {
    codespaceName: z.string(),
  },
  async (args, extra) => {
    try {
      const { codespaceName, ...requestData } = args
      const url = `/user/codespaces/${codespaceName}/stop`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('codespaceName' in mappedParams) {
        mappedParams['codespace_name'] = mappedParams['codespaceName']
        delete mappedParams['codespaceName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/list-docker-migration-conflicting-packages-for-authenticated-user',
  `Get list of conflicting packages during Docker migration for authenticated-user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/docker/conflicts',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/set-primary-email-visibility-for-authenticated-user',
  `Set primary email visibility for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: '/user/email/visibility',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-emails-for-authenticated-user',
  `List email addresses for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/emails',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/add-email-for-authenticated-user',
  `Add an email address for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/user/emails',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/delete-email-for-authenticated-user',
  `Delete an email address for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: '/user/emails',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-followers-for-authenticated-user',
  `List followers of the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/followers',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-followed-by-authenticated-user',
  `List the people the authenticated user follows`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/following',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/check-person-is-followed-by-authenticated',
  `Check if a person is followed by the authenticated user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/user/following/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/follow',
  `Follow a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...requestData } = args
      const url = `/user/following/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/unfollow',
  `Unfollow a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/user/following/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-gpg-keys-for-authenticated-user',
  `List GPG keys for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/gpg_keys',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/create-gpg-key-for-authenticated-user',
  `Create a GPG key for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/user/gpg_keys',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/get-gpg-key-for-authenticated-user',
  `Get a GPG key for the authenticated user`,
  {
    gpgKeyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gpgKeyId, ...queryParams } = args
      const url = `/user/gpg_keys/${gpgKeyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gpgKeyId' in mappedParams) {
        mappedParams['gpg_key_id'] = mappedParams['gpgKeyId']
        delete mappedParams['gpgKeyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/delete-gpg-key-for-authenticated-user',
  `Delete a GPG key for the authenticated user`,
  {
    gpgKeyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { gpgKeyId, ...queryParams } = args
      const url = `/user/gpg_keys/${gpgKeyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('gpgKeyId' in mappedParams) {
        mappedParams['gpg_key_id'] = mappedParams['gpgKeyId']
        delete mappedParams['gpgKeyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/list-installations-for-authenticated-user',
  `List app installations accessible to the user access token`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/installations',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/list-installation-repos-for-authenticated-user',
  `List repositories accessible to the user access token`,
  {
    installationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { installationId, ...queryParams } = args
      const url = `/user/installations/${installationId}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('installationId' in mappedParams) {
        mappedParams['installation_id'] = mappedParams['installationId']
        delete mappedParams['installationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/add-repo-to-installation-for-authenticated-user',
  `Add a repository to an app installation`,
  {
    installationId: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { installationId, repositoryId, ...requestData } = args
      const url = `/user/installations/${installationId}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('installationId' in mappedParams) {
        mappedParams['installation_id'] = mappedParams['installationId']
        delete mappedParams['installationId']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/remove-repo-from-installation-for-authenticated-user',
  `Remove a repository from an app installation`,
  {
    installationId: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { installationId, repositoryId, ...queryParams } = args
      const url = `/user/installations/${installationId}/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('installationId' in mappedParams) {
        mappedParams['installation_id'] = mappedParams['installationId']
        delete mappedParams['installationId']
      }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'interactions/get-restrictions-for-authenticated-user',
  `Get interaction restrictions for your public repositories`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/interaction-limits',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'interactions/set-restrictions-for-authenticated-user',
  `Set interaction restrictions for your public repositories`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: '/user/interaction-limits',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'interactions/remove-restrictions-for-authenticated-user',
  `Remove interaction restrictions from your public repositories`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: '/user/interaction-limits',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'issues/list-for-authenticated-user',
  `List user account issues assigned to the authenticated user`,
  {
    filter: z.string().optional(),
    state: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/issues',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-public-ssh-keys-for-authenticated-user',
  `List public SSH keys for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/keys',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/create-public-ssh-key-for-authenticated-user',
  `Create a public SSH key for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/user/keys',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/get-public-ssh-key-for-authenticated-user',
  `Get a public SSH key for the authenticated user`,
  {
    keyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { keyId, ...queryParams } = args
      const url = `/user/keys/${keyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('keyId' in mappedParams) {
        mappedParams['key_id'] = mappedParams['keyId']
        delete mappedParams['keyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/delete-public-ssh-key-for-authenticated-user',
  `Delete a public SSH key for the authenticated user`,
  {
    keyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { keyId, ...queryParams } = args
      const url = `/user/keys/${keyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('keyId' in mappedParams) {
        mappedParams['key_id'] = mappedParams['keyId']
        delete mappedParams['keyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/list-subscriptions-for-authenticated-user',
  `List subscriptions for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/marketplace_purchases',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/list-subscriptions-for-authenticated-user-stubbed',
  `List subscriptions for the authenticated user (stubbed)`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/marketplace_purchases/stubbed',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-memberships-for-authenticated-user',
  `List organization memberships for the authenticated user`,
  {
    state: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/memberships/orgs',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/get-membership-for-authenticated-user',
  `Get an organization membership for the authenticated user`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...queryParams } = args
      const url = `/user/memberships/orgs/${org}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/update-membership-for-authenticated-user',
  `Update an organization membership for the authenticated user`,
  {
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { org, ...requestData } = args
      const url = `/user/memberships/orgs/${org}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('migrations/list-for-authenticated-user', `List user migrations`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/user/migrations',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('migrations/start-for-authenticated-user', `Start a user migration`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/user/migrations',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'migrations/get-status-for-authenticated-user',
  `Get a user migration status`,
  {
    migrationId: z.string(),
    exclude: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { migrationId, ...queryParams } = args
      const url = `/user/migrations/${migrationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/get-archive-for-authenticated-user',
  `Download a user migration archive`,
  {
    migrationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { migrationId, ...queryParams } = args
      const url = `/user/migrations/${migrationId}/archive`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/delete-archive-for-authenticated-user',
  `Delete a user migration archive`,
  {
    migrationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { migrationId, ...queryParams } = args
      const url = `/user/migrations/${migrationId}/archive`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/unlock-repo-for-authenticated-user',
  `Unlock a user repository`,
  {
    migrationId: z.string(),
    repoName: z.string(),
  },
  async (args, extra) => {
    try {
      const { migrationId, repoName, ...queryParams } = args
      const url = `/user/migrations/${migrationId}/repos/${repoName}/lock`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }
      if ('repoName' in mappedParams) {
        mappedParams['repo_name'] = mappedParams['repoName']
        delete mappedParams['repoName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'migrations/list-repos-for-authenticated-user',
  `List repositories for a user migration`,
  {
    migrationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { migrationId, ...queryParams } = args
      const url = `/user/migrations/${migrationId}/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('migrationId' in mappedParams) {
        mappedParams['migration_id'] = mappedParams['migrationId']
        delete mappedParams['migrationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-for-authenticated-user',
  `List organizations for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/orgs',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/list-packages-for-authenticated-user',
  `List packages for the authenticated user&#x27;s namespace`,
  {
    packageType: z.string(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/packages',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/get-package-for-authenticated-user',
  `Get a package for the authenticated user`,
  {
    packageType: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageType, packageName, ...queryParams } = args
      const url = `/user/packages/${packageType}/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/delete-package-for-authenticated-user',
  `Delete a package for the authenticated user`,
  {
    packageType: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageType, packageName, ...queryParams } = args
      const url = `/user/packages/${packageType}/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/restore-package-for-authenticated-user',
  `Restore a package for the authenticated user`,
  {
    packageType: z.string(),
    packageName: z.string(),
    token: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { packageType, packageName, ...requestData } = args
      const url = `/user/packages/${packageType}/${packageName}/restore`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/get-all-package-versions-for-package-owned-by-authenticated-user',
  `List package versions for a package owned by the authenticated user`,
  {
    packageType: z.string(),
    packageName: z.string(),
    state: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { packageType, packageName, ...queryParams } = args
      const url = `/user/packages/${packageType}/${packageName}/versions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/get-package-version-for-authenticated-user',
  `Get a package version for the authenticated user`,
  {
    packageType: z.string(),
    packageName: z.string(),
    packageVersionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageType, packageName, packageVersionId, ...queryParams } = args
      const url = `/user/packages/${packageType}/${packageName}/versions/${packageVersionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersionId' in mappedParams) {
        mappedParams['package_version_id'] = mappedParams['packageVersionId']
        delete mappedParams['packageVersionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/delete-package-version-for-authenticated-user',
  `Delete a package version for the authenticated user`,
  {
    packageType: z.string(),
    packageName: z.string(),
    packageVersionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageType, packageName, packageVersionId, ...queryParams } = args
      const url = `/user/packages/${packageType}/${packageName}/versions/${packageVersionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersionId' in mappedParams) {
        mappedParams['package_version_id'] = mappedParams['packageVersionId']
        delete mappedParams['packageVersionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/restore-package-version-for-authenticated-user',
  `Restore a package version for the authenticated user`,
  {
    packageType: z.string(),
    packageName: z.string(),
    packageVersionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageType, packageName, packageVersionId, ...requestData } = args
      const url = `/user/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersionId' in mappedParams) {
        mappedParams['package_version_id'] = mappedParams['packageVersionId']
        delete mappedParams['packageVersionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('projects-classic/create-for-authenticated-user', `Create a user project`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/user/projects',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'users/list-public-emails-for-authenticated-user',
  `List public email addresses for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/public_emails',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-for-authenticated-user',
  `List repositories for the authenticated user`,
  {
    visibility: z.string().optional(),
    affiliation: z.string().optional(),
    type: z.string().optional(),
    sort: z.string().optional(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/repos',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/create-for-authenticated-user',
  `Create a repository for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/user/repos',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-invitations-for-authenticated-user',
  `List repository invitations for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/repository_invitations',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/accept-invitation-for-authenticated-user',
  `Accept a repository invitation`,
  {
    invitationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { invitationId, ...requestData } = args
      const url = `/user/repository_invitations/${invitationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('invitationId' in mappedParams) {
        mappedParams['invitation_id'] = mappedParams['invitationId']
        delete mappedParams['invitationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/decline-invitation-for-authenticated-user',
  `Decline a repository invitation`,
  {
    invitationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { invitationId, ...queryParams } = args
      const url = `/user/repository_invitations/${invitationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('invitationId' in mappedParams) {
        mappedParams['invitation_id'] = mappedParams['invitationId']
        delete mappedParams['invitationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-social-accounts-for-authenticated-user',
  `List social accounts for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/social_accounts',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/add-social-account-for-authenticated-user',
  `Add social accounts for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/user/social_accounts',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/delete-social-account-for-authenticated-user',
  `Delete social accounts for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: '/user/social_accounts',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-ssh-signing-keys-for-authenticated-user',
  `List SSH signing keys for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/ssh_signing_keys',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/create-ssh-signing-key-for-authenticated-user',
  `Create a SSH signing key for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/user/ssh_signing_keys',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/get-ssh-signing-key-for-authenticated-user',
  `Get an SSH signing key for the authenticated user`,
  {
    sshSigningKeyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { sshSigningKeyId, ...queryParams } = args
      const url = `/user/ssh_signing_keys/${sshSigningKeyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('sshSigningKeyId' in mappedParams) {
        mappedParams['ssh_signing_key_id'] = mappedParams['sshSigningKeyId']
        delete mappedParams['sshSigningKeyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/delete-ssh-signing-key-for-authenticated-user',
  `Delete an SSH signing key for the authenticated user`,
  {
    sshSigningKeyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { sshSigningKeyId, ...queryParams } = args
      const url = `/user/ssh_signing_keys/${sshSigningKeyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('sshSigningKeyId' in mappedParams) {
        mappedParams['ssh_signing_key_id'] = mappedParams['sshSigningKeyId']
        delete mappedParams['sshSigningKeyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-repos-starred-by-authenticated-user',
  `List repositories starred by the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/starred',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/check-repo-is-starred-by-authenticated-user',
  `Check if a repository is starred by the authenticated user`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/user/starred/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/star-repo-for-authenticated-user',
  `Star a repository for the authenticated user`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...requestData } = args
      const url = `/user/starred/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/unstar-repo-for-authenticated-user',
  `Unstar a repository for the authenticated user`,
  {
    owner: z.string(),
    repo: z.string(),
  },
  async (args, extra) => {
    try {
      const { owner, repo, ...queryParams } = args
      const url = `/user/starred/${owner}/${repo}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-watched-repos-for-authenticated-user',
  `List repositories watched by the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/subscriptions',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'teams/list-for-authenticated-user',
  `List teams for the authenticated user`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/user/teams',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/get-by-id',
  `Get a user using their ID`,
  {
    accountId: z.string(),
  },
  async (args, extra) => {
    try {
      const { accountId, ...queryParams } = args
      const url = `/user/${accountId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('accountId' in mappedParams) {
        mappedParams['account_id'] = mappedParams['accountId']
        delete mappedParams['accountId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('users/list', `List users`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/users',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'users/get-by-username',
  `Get a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-attestations-bulk',
  `List attestations by bulk subject digests`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...requestData } = args
      const url = `/users/${username}/attestations/bulk-list`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/delete-attestations-bulk',
  `Delete attestations in bulk`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...requestData } = args
      const url = `/users/${username}/attestations/delete-request`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/delete-attestations-by-subject-digest',
  `Delete attestations by subject digest`,
  {
    username: z.string(),
    subjectDigest: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, subjectDigest, ...queryParams } = args
      const url = `/users/${username}/attestations/digest/${subjectDigest}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('subjectDigest' in mappedParams) {
        mappedParams['subject_digest'] = mappedParams['subjectDigest']
        delete mappedParams['subjectDigest']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/delete-attestations-by-id',
  `Delete attestations by ID`,
  {
    username: z.string(),
    attestationId: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, attestationId, ...queryParams } = args
      const url = `/users/${username}/attestations/${attestationId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('attestationId' in mappedParams) {
        mappedParams['attestation_id'] = mappedParams['attestationId']
        delete mappedParams['attestationId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-attestations',
  `List attestations`,
  {
    username: z.string(),
    subjectDigest: z.string(),
    predicateType: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { username, subjectDigest, ...queryParams } = args
      const url = `/users/${username}/attestations/${subjectDigest}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('subjectDigest' in mappedParams) {
        mappedParams['subject_digest'] = mappedParams['subjectDigest']
        delete mappedParams['subjectDigest']
      }
      if ('predicateType' in mappedParams) {
        mappedParams['predicate_type'] = mappedParams['predicateType']
        delete mappedParams['predicateType']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/list-docker-migration-conflicting-packages-for-user',
  `Get list of conflicting packages during Docker migration for user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/docker/conflicts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-events-for-authenticated-user',
  `List events for the authenticated user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-org-events-for-authenticated-user',
  `List organization events for the authenticated user`,
  {
    username: z.string(),
    org: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, org, ...queryParams } = args
      const url = `/users/${username}/events/orgs/${org}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-public-events-for-user',
  `List public events for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/events/public`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-followers-for-user',
  `List followers of a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/followers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-following-for-user',
  `List the people a user follows`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/following`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/check-following-for-user',
  `Check if a user follows another user`,
  {
    username: z.string(),
    targetUser: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, targetUser, ...queryParams } = args
      const url = `/users/${username}/following/${targetUser}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('targetUser' in mappedParams) {
        mappedParams['target_user'] = mappedParams['targetUser']
        delete mappedParams['targetUser']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'gists/list-for-user',
  `List gists for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/gists`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-gpg-keys-for-user',
  `List GPG keys for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/gpg_keys`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/get-context-for-user',
  `Get contextual information for a user`,
  {
    username: z.string(),
    subjectType: z.string().optional(),
    subjectId: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/hovercard`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('subjectType' in mappedParams) {
        mappedParams['subject_type'] = mappedParams['subjectType']
        delete mappedParams['subjectType']
      }
      if ('subjectId' in mappedParams) {
        mappedParams['subject_id'] = mappedParams['subjectId']
        delete mappedParams['subjectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'apps/get-user-installation',
  `Get a user installation for the authenticated app`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/installation`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-public-keys-for-user',
  `List public keys for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/keys`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'orgs/list-for-user',
  `List organizations for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/orgs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/list-packages-for-user',
  `List packages for a user`,
  {
    username: z.string(),
    packageType: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/get-package-for-user',
  `Get a package for a user`,
  {
    username: z.string(),
    packageType: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, packageType, packageName, ...queryParams } = args
      const url = `/users/${username}/packages/${packageType}/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/delete-package-for-user',
  `Delete a package for a user`,
  {
    username: z.string(),
    packageType: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, packageType, packageName, ...queryParams } = args
      const url = `/users/${username}/packages/${packageType}/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/restore-package-for-user',
  `Restore a package for a user`,
  {
    username: z.string(),
    packageType: z.string(),
    packageName: z.string(),
    token: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { username, packageType, packageName, ...requestData } = args
      const url = `/users/${username}/packages/${packageType}/${packageName}/restore`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/get-all-package-versions-for-package-owned-by-user',
  `List package versions for a package owned by a user`,
  {
    username: z.string(),
    packageType: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, packageType, packageName, ...queryParams } = args
      const url = `/users/${username}/packages/${packageType}/${packageName}/versions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/get-package-version-for-user',
  `Get a package version for a user`,
  {
    username: z.string(),
    packageType: z.string(),
    packageName: z.string(),
    packageVersionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, packageType, packageName, packageVersionId, ...queryParams } = args
      const url = `/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersionId' in mappedParams) {
        mappedParams['package_version_id'] = mappedParams['packageVersionId']
        delete mappedParams['packageVersionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/delete-package-version-for-user',
  `Delete package version for a user`,
  {
    username: z.string(),
    packageType: z.string(),
    packageName: z.string(),
    packageVersionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, packageType, packageName, packageVersionId, ...queryParams } = args
      const url = `/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersionId' in mappedParams) {
        mappedParams['package_version_id'] = mappedParams['packageVersionId']
        delete mappedParams['packageVersionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'packages/restore-package-version-for-user',
  `Restore package version for a user`,
  {
    username: z.string(),
    packageType: z.string(),
    packageName: z.string(),
    packageVersionId: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, packageType, packageName, packageVersionId, ...requestData } = args
      const url = `/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersionId' in mappedParams) {
        mappedParams['package_version_id'] = mappedParams['packageVersionId']
        delete mappedParams['packageVersionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'projects-classic/list-for-user',
  `List user projects`,
  {
    username: z.string(),
    state: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-received-events-for-user',
  `List events received by the authenticated user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/received_events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-received-public-events-for-user',
  `List public events received by a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/received_events/public`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'repos/list-for-user',
  `List repositories for a user`,
  {
    username: z.string(),
    type: z.string().optional(),
    sort: z.string().optional(),
    direction: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/repos`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'billing/get-github-actions-billing-user',
  `Get GitHub Actions billing for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/settings/billing/actions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'billing/get-github-packages-billing-user',
  `Get GitHub Packages billing for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/settings/billing/packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'billing/get-shared-storage-billing-user',
  `Get shared storage billing for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/settings/billing/shared-storage`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'billing/get-github-billing-usage-report-user',
  `Get billing usage report for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/settings/billing/usage`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-social-accounts-for-user',
  `List social accounts for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/social_accounts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'users/list-ssh-signing-keys-for-user',
  `List SSH signing keys for a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/ssh_signing_keys`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-repos-starred-by-user',
  `List repositories starred by a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/starred`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'activity/list-repos-watched-by-user',
  `List repositories watched by a user`,
  {
    username: z.string(),
  },
  async (args, extra) => {
    try {
      const { username, ...queryParams } = args
      const url = `/users/${username}/subscriptions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('meta/get-all-versions', `Get all API versions`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/versions',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('meta/get-zen', `Get the Zen of GitHub`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/zen',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})
